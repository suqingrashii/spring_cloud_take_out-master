Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1598782138300)
+++ .idea/.gitignore	(date 1598782138300)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1598782133535)
+++ .idea/misc.xml	(date 1598782133535)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_14" project-jdk-name="14" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: spring_cloud_take-out.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- spring_cloud_take-out.iml	(date 1598782375776)
+++ spring_cloud_take-out.iml	(date 1598782375776)
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4" />
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1599808601277)
+++ pom.xml	(date 1599808601277)
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.sy</groupId>
+    <artifactId>spring_cloud_take-out</artifactId>
+    <packaging>pom</packaging>
+    <version>1.0-SNAPSHOT</version>
+    <modules>
+        <module>eurekaserver</module>
+        <module>configserver</module>
+        <module>order</module>
+        <module>menu</module>
+        <module>client</module>
+        <module>user</module>
+        <module>account</module>
+        <module>zuul</module>
+    </modules>
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <maven.compiler.source>14</maven.compiler.source>
+        <maven.compiler.target>14</maven.compiler.target>
+    </properties>
+
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>2.0.7.RELEASE</version>
+    </parent>
+    <dependencies>
+        <!-- springboot-web依赖 -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+
+        <!-- 以下四个依赖可解决 JDK9 以上版本没有 JAXB API 的问题 -->
+        <dependency>
+            <groupId>javax.xml.bind</groupId>
+            <artifactId>jaxb-api</artifactId>
+            <version>2.3.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.sun.xml.bind</groupId>
+            <artifactId>jaxb-impl</artifactId>
+            <version>2.3.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.sun.xml.bind</groupId>
+            <artifactId>jaxb-core</artifactId>
+            <version>2.3.0</version>
+        </dependency>
+        <dependency>
+            <groupId>javax.activation</groupId>
+            <artifactId>activation</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+    </dependencies>
+
+    <!--  spring cloud 相关依赖-->
+    <dependencyManagement>
+        <dependencies>
+            <dependency>
+                <groupId>org.springframework.cloud</groupId>
+                <artifactId>spring-cloud-dependencies</artifactId>
+                <version>Finchley.SR2</version>
+                <type>pom</type>
+                <scope>import</scope>
+            </dependency>
+        </dependencies>
+    </dependencyManagement>
+</project>
\ No newline at end of file
Index: user/src/main/java/com/sy/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/src/main/java/com/sy/repository/UserRepository.java	(date 1599558716835)
+++ user/src/main/java/com/sy/repository/UserRepository.java	(date 1599558716835)
@@ -0,0 +1,16 @@
+package com.sy.repository;
+
+import com.sy.beans.User;
+
+import java.util.List;
+
+public interface UserRepository
+{
+    public List<User> findAll(int index, int limit);
+    public int count();
+    public User findById(Long id);
+    public void save(User user);
+    public void update(User user);
+    public void deleteById(Long id);
+    public void updateById(User user);
+}
Index: client/src/main/java/com/sy/beans/Type.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/beans/Type.java	(date 1598866533824)
+++ client/src/main/java/com/sy/beans/Type.java	(date 1598866533824)
@@ -0,0 +1,38 @@
+package com.sy.beans;
+
+public class Type {
+    private long id;
+    private String name;
+
+    public Type(long id, String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+    public Type() {
+    }
+
+    @Override
+    public String toString() {
+        return "Type{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                '}';
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+}
Index: user/src/main/java/com/sy/beans/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/src/main/java/com/sy/beans/User.java	(date 1599061874836)
+++ user/src/main/java/com/sy/beans/User.java	(date 1599061874836)
@@ -0,0 +1,112 @@
+package com.sy.beans;
+
+import org.springframework.format.annotation.DateTimeFormat;
+
+import java.util.Date;
+
+public class User
+{
+    private Long id;
+    private String username;
+    private String password;
+    private String nickname;
+    private String gender;
+    private String telephone;
+    @DateTimeFormat(pattern="yyyy-MM-dd")
+    private Date registerdate;
+    private String address;
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public User(Long id, String username, String password, String nickname,
+                String gender, String telephone, Date registerdate, String address) {
+        this.id = id;
+        this.username = username;
+        this.password = password;
+        this.nickname = nickname;
+        this.gender = gender;
+        this.telephone = telephone;
+        this.registerdate = registerdate;
+        this.address = address;
+    }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                ", password='" + password + '\'' +
+                ", nickname='" + nickname + '\'' +
+                ", gender='" + gender + '\'' +
+                ", telephone='" + telephone + '\'' +
+                ", registerdate=" + registerdate +
+                ", address='" + address + '\'' +
+                '}';
+    }
+
+    public User() {
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getNickname() {
+        return nickname;
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+    }
+
+    public String getGender() {
+        return gender;
+    }
+
+    public void setGender(String gender) {
+        this.gender = gender;
+    }
+
+    public String getTelephone() {
+        return telephone;
+    }
+
+    public void setTelephone(String telephone) {
+        this.telephone = telephone;
+    }
+
+    public Date getRegisterdate() {
+        return registerdate;
+    }
+
+    public void setRegisterdate(Date registerdate) {
+        this.registerdate = registerdate;
+    }
+
+}
Index: client/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/pom.xml	(date 1599819966532)
+++ client/pom.xml	(date 1599819966532)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>spring_cloud_take-out</artifactId>
+        <groupId>com.sy</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>client</artifactId>
+    <dependencies>
+
+        <!--  注册依赖  -->
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
+        </dependency>
+
+        <!--  feign依赖  -->
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-openfeign</artifactId>
+            <version>2.0.2.RELEASE</version>
+        </dependency>
+        <!--  读取配置文件依赖  -->
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-config</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.auth0</groupId>
+            <artifactId>java-jwt</artifactId>
+            <version>3.10.0</version>
+        </dependency>
+    </dependencies>
+</project>
\ No newline at end of file
Index: client/src/main/java/com/sy/beans/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/beans/Menu.java	(date 1598866522182)
+++ client/src/main/java/com/sy/beans/Menu.java	(date 1598866522182)
@@ -0,0 +1,72 @@
+package com.sy.beans;
+
+public class Menu
+{
+    private Long id;
+    private String name;
+    private Double price;
+    private String flavor;
+    private Type type;
+
+    public Menu(Long id, String name, Double price, String flavor, Type type) {
+        this.id = id;
+        this.name = name;
+        this.price = price;
+        this.flavor = flavor;
+        this.type = type;
+    }
+
+    public Menu() {
+    }
+
+    @Override
+    public String toString() {
+        return "Menu{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", price=" + price +
+                ", flavor='" + flavor + '\'' +
+                ", type=" + type +
+                '}';
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getPrice() {
+        return price;
+    }
+
+    public void setPrice(Double price) {
+        this.price = price;
+    }
+
+    public String getFlavor() {
+        return flavor;
+    }
+
+    public void setFlavor(String flavor) {
+        this.flavor = flavor;
+    }
+
+    public Type getType() {
+        return type;
+    }
+
+    public void setType(Type type) {
+        this.type = type;
+    }
+}
Index: menu/src/main/java/com/sy/beans/Type.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/src/main/java/com/sy/beans/Type.java	(date 1598866533824)
+++ menu/src/main/java/com/sy/beans/Type.java	(date 1598866533824)
@@ -0,0 +1,38 @@
+package com.sy.beans;
+
+public class Type {
+    private long id;
+    private String name;
+
+    public Type(long id, String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+    public Type() {
+    }
+
+    @Override
+    public String toString() {
+        return "Type{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                '}';
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+}
Index: config/user-dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/user-dev.yml	(date 1598954995633)
+++ config/user-dev.yml	(date 1598954995633)
@@ -0,0 +1,17 @@
+server:
+  port: 8040
+spring:
+  application:
+    name: user
+  datasource:
+    url: jdbc:mysql://localhost:3306/testjdbc?serverTimezone=GMT%2B8
+    username: root
+    password: shiyan831529
+    driver-class-name: com.mysql.cj.jdbc.Driver
+mybatis:
+  mapper-locations: classpath:/mapping/*.xml
+  type-aliases-package: com.sy.beans
+eureka:
+  client:
+    service-url:
+      defaultZone: http://localhost:8761/eureka/
\ No newline at end of file
Index: user/src/main/java/com/sy/UserApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/src/main/java/com/sy/UserApplication.java	(date 1598956775212)
+++ user/src/main/java/com/sy/UserApplication.java	(date 1598956775212)
@@ -0,0 +1,15 @@
+package com.sy;
+
+import org.mybatis.spring.annotation.MapperScan;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+@MapperScan("com.sy.repository")
+public class UserApplication
+{
+    public static void main(String[] args)
+    {
+        SpringApplication.run(UserApplication.class,args);
+    }
+}
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/Project_Default.xml	(date 1598794127076)
+++ .idea/inspectionProfiles/Project_Default.xml	(date 1598794127076)
@@ -0,0 +1,7 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="SqlDialectInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="SqlNoDataSourceInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+  </profile>
+</component>
\ No newline at end of file
Index: menu/src/main/resources/mapping/MenuRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/src/main/resources/mapping/MenuRepository.xml	(date 1599204375198)
+++ menu/src/main/resources/mapping/MenuRepository.xml	(date 1599204375198)
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.MenuRepository">
+    <resultMap id="menuMap" type="Menu">
+        <id property="id" column="mid"/>
+        <result property="name" column="mname"/>
+        <result property="author" column="author"/>
+        <result property="price" column="price"/>
+        <result property="flavor" column="flavor"/>
+        <!-- 映射type -->
+        <association property="type" javaType="Type">
+            <id property="id" column="tid"/>
+            <result property="name" column="tname"/>
+        </association>
+    </resultMap>
+    <select id="findAll" resultMap="menuMap">
+        select m.id mid,m.name mname,m.price,m.flavor,t.id tid,t.name tname
+        from t_menu m,t_type t
+        where m.tid = t.id
+        order by mid limit #{param1},#{param2}
+    </select>
+    <select id="count" resultType="int">
+		select count(id) from t_menu;
+	</select>
+    <select id="findById" parameterType="java.lang.Long" resultMap="menuMap">
+        select m.id mid,m.name mname,m.price,m.flavor,t.id tid,t.name tname
+        from t_menu m,t_type t
+        where m.tid = t.id
+        and m.id = #{id};
+    </select>
+    <insert id="save" parameterType="Menu">
+        insert into t_menu(name,price,flavor,tid)
+        values (#{name},#{price},#{flavor},#{type.id});
+    </insert>
+    <update id="update" parameterType="Menu">
+        update t_menu
+        <set>
+            <if test="name!=null and name!=''">
+                name = #{name}
+            </if>
+            <if test="price!=null and price!=''">
+                ,price = #{price}
+            </if>
+            <if test="flavor!=null and flavor!=''">
+                ,flavor = #{flavor}
+            </if>
+                ,tid = #{type.id}
+        </set>
+        <where>
+            id = #{id}
+        </where>
+    </update>
+    <delete id="deleteById" parameterType="java.lang.Long">
+        delete from t_menu
+        where id = #{id};
+    </delete>
+    <select id="countByTid" parameterType="java.lang.Long" resultType="int">
+		select count(id)
+		from t_menu
+		where tid  = #{typeId};
+	</select>
+    <select id="findByTid" resultType="Menu">
+        select *
+        from t_menu
+        where tid  = #{param3}
+        order by id limit #{param1},#{param2};
+    </select>
+</mapper>
\ No newline at end of file
Index: menu/src/main/java/com/sy/repository/MenuRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/src/main/java/com/sy/repository/MenuRepository.java	(date 1599203033288)
+++ menu/src/main/java/com/sy/repository/MenuRepository.java	(date 1599203033288)
@@ -0,0 +1,17 @@
+package com.sy.repository;
+
+import com.sy.beans.Menu;
+
+import java.util.List;
+
+public interface MenuRepository
+{
+    public List<Menu> findAll(int index,int limit);
+    public int count();
+    public Menu findById(Long id);
+    public void save(Menu menu);
+    public void update(Menu menu);
+    public void deleteById(Long id);
+    public List<Menu> findByTid(int index,int limit,Long typeId);
+    public int countByTid(Long typeId);
+}
Index: order/src/main/java/com/sy/beans/Admin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/java/com/sy/beans/Admin.java	(date 1599123586511)
+++ order/src/main/java/com/sy/beans/Admin.java	(date 1599123586511)
@@ -0,0 +1,50 @@
+package com.sy.beans;
+
+public class Admin
+{
+    private Long id;
+    private String username;
+    private String password;
+
+    public Admin(Long id, String username, String password) {
+        this.id = id;
+        this.username = username;
+        this.password = password;
+    }
+
+    public Admin() {
+    }
+
+    @Override
+    public String toString() {
+        return "Admin{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                ", password='" + password + '\'' +
+                '}';
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+}
Index: menu/src/main/java/com/sy/beans/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/src/main/java/com/sy/beans/Menu.java	(date 1598866522182)
+++ menu/src/main/java/com/sy/beans/Menu.java	(date 1598866522182)
@@ -0,0 +1,72 @@
+package com.sy.beans;
+
+public class Menu
+{
+    private Long id;
+    private String name;
+    private Double price;
+    private String flavor;
+    private Type type;
+
+    public Menu(Long id, String name, Double price, String flavor, Type type) {
+        this.id = id;
+        this.name = name;
+        this.price = price;
+        this.flavor = flavor;
+        this.type = type;
+    }
+
+    public Menu() {
+    }
+
+    @Override
+    public String toString() {
+        return "Menu{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", price=" + price +
+                ", flavor='" + flavor + '\'' +
+                ", type=" + type +
+                '}';
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getPrice() {
+        return price;
+    }
+
+    public void setPrice(Double price) {
+        this.price = price;
+    }
+
+    public String getFlavor() {
+        return flavor;
+    }
+
+    public void setFlavor(String flavor) {
+        this.flavor = flavor;
+    }
+
+    public Type getType() {
+        return type;
+    }
+
+    public void setType(Type type) {
+        this.type = type;
+    }
+}
Index: account/src/main/java/com/sy/AccountApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/java/com/sy/AccountApplication.java	(date 1599119003515)
+++ account/src/main/java/com/sy/AccountApplication.java	(date 1599119003515)
@@ -0,0 +1,15 @@
+package com.sy;
+
+import org.mybatis.spring.annotation.MapperScan;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+@MapperScan("com.sy.repository")
+public class AccountApplication
+{
+    public static void main(String[] args)
+    {
+        SpringApplication.run(AccountApplication.class,args);
+    }
+}
Index: user/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/pom.xml	(date 1598954937164)
+++ user/pom.xml	(date 1598954937164)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>spring_cloud_take-out</artifactId>
+        <groupId>com.sy</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>user</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-config</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.mybatis.spring.boot</groupId>
+            <artifactId>mybatis-spring-boot-starter</artifactId>
+            <version>2.1.3</version>
+        </dependency>
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <version>8.0.21</version>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: menu/src/main/java/com/sy/handler/MenuHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/src/main/java/com/sy/handler/MenuHandler.java	(date 1599203304564)
+++ menu/src/main/java/com/sy/handler/MenuHandler.java	(date 1599203304564)
@@ -0,0 +1,78 @@
+package com.sy.handler;
+
+import com.sy.beans.Menu;
+import com.sy.repository.MenuRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequestMapping("/menu")
+public class MenuHandler
+{
+    @Autowired
+    private MenuRepository menuRepository;
+
+    @Value("${server.port}")
+    private String port;
+
+    @GetMapping("/index")
+    public String index()
+    {
+        return this.port;
+    }
+
+    @GetMapping("/findAll/{index}/{limit}")
+    public List<Menu> findAll(@PathVariable("index") int index,@PathVariable("limit") int limit)
+    {
+        index = (index-1)*limit;
+        return  menuRepository.findAll(index,limit);
+    }
+
+    @GetMapping("/count")
+    public int count()
+    {
+        return menuRepository.count();
+    }
+
+    @GetMapping("/findById/{id}")
+    public Menu findById(@PathVariable("id") Long id)
+    {
+        return menuRepository.findById(id);
+    }
+
+    @PostMapping("/update")
+    public boolean update(@RequestBody Menu menu)
+    {
+        menuRepository.update(menu);
+        return true;
+    }
+
+    @DeleteMapping("/deleteById/{id}")
+    public boolean deleteById(@PathVariable("id") Long id)
+    {
+        menuRepository.deleteById(id);
+        return true;
+    }
+    @PostMapping("/save")
+    public boolean save(@RequestBody Menu menu)
+    {
+        menuRepository.save(menu);
+        return true;
+    }
+
+    @GetMapping("/countByTid/{typeId}")
+    public int countByTid(@PathVariable("typeId") Long typeId)
+    {
+        return menuRepository.countByTid(typeId);
+    }
+
+    @GetMapping("/findByTid/{index}/{limit}/{typeId}")
+    public List<Menu> findByTid(@PathVariable("index") int index,@PathVariable("limit") int limit,@PathVariable("typeId") Long typeId)
+    {
+        index = (index-1)*limit;
+        return  menuRepository.findByTid(index,limit,typeId);
+    }
+}
Index: config/account-dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/account-dev.yml	(date 1599119003565)
+++ config/account-dev.yml	(date 1599119003565)
@@ -0,0 +1,17 @@
+server:
+  port: 8050
+spring:
+  application:
+    name: account
+  datasource:
+    url: jdbc:mysql://localhost:3306/testjdbc?serverTimezone=GMT%2B8
+    username: root
+    password: shiyan831529
+    driver-class-name: com.mysql.cj.jdbc.Driver
+mybatis:
+  mapper-locations: classpath:/mapping/*.xml
+  type-aliases-package: com.sy.beans
+eureka:
+  client:
+    service-url:
+      defaultZone: http://localhost:8761/eureka/
\ No newline at end of file
Index: menu/src/main/java/com/sy/MenuApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/src/main/java/com/sy/MenuApplication.java	(date 1598794818611)
+++ menu/src/main/java/com/sy/MenuApplication.java	(date 1598794818611)
@@ -0,0 +1,15 @@
+package com.sy;
+
+import org.mybatis.spring.annotation.MapperScan;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+@MapperScan("com.sy.repository")
+public class MenuApplication
+{
+    public static void main(String[] args)
+    {
+        SpringApplication.run(MenuApplication.class,args);
+    }
+}
Index: config/menu-dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/menu-dev.yml	(date 1598794538691)
+++ config/menu-dev.yml	(date 1598794538691)
@@ -0,0 +1,17 @@
+server:
+  port: 8020
+spring:
+  application:
+    name: menu
+  datasource:
+    url: jdbc:mysql://localhost:3306/testjdbc?serverTimezone=GMT%2B8
+    username: root
+    password: shiyan831529
+    driver-class-name: com.mysql.cj.jdbc.Driver
+mybatis:
+  mapper-locations: classpath:/mapping/*.xml
+  type-aliases-package: com.sy.beans
+eureka:
+  client:
+    service-url:
+      defaultZone: http://localhost:8761/eureka/
\ No newline at end of file
Index: menu/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/src/main/resources/bootstrap.yml	(date 1598792141502)
+++ menu/src/main/resources/bootstrap.yml	(date 1598792141502)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: menu
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: config/gateway-dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/gateway-dev.yml	(date 1599841658173)
+++ config/gateway-dev.yml	(date 1599841658173)
@@ -0,0 +1,12 @@
+server:
+  port: 8030
+spring:
+  application:
+    name: gateway
+eureka:
+  client:
+    service-url:
+      defaultZone: http://localhost:8761/eureka/
+zuul:
+  routes:
+    client: /client/**
\ No newline at end of file
Index: zuul/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul/src/main/resources/bootstrap.yml	(date 1599990684517)
+++ zuul/src/main/resources/bootstrap.yml	(date 1599990684517)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: gateway
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: order/target/classes/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/target/classes/bootstrap.yml	(date 1598787093235)
+++ order/target/classes/bootstrap.yml	(date 1598787093235)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: order
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: zuul/src/main/java/com/sy/utils/JWTUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul/src/main/java/com/sy/utils/JWTUtils.java	(date 1599990180272)
+++ zuul/src/main/java/com/sy/utils/JWTUtils.java	(date 1599990180272)
@@ -0,0 +1,46 @@
+package com.sy.utils;
+
+import com.auth0.jwt.JWT;
+import com.auth0.jwt.JWTCreator;
+import com.auth0.jwt.algorithms.Algorithm;
+import com.auth0.jwt.interfaces.DecodedJWT;
+
+import java.util.Calendar;
+import java.util.Map;
+
+public class JWTUtils
+{
+    private static final String SING = "!qsxqw#sdsdf^ssdwe";
+    public static String getToken(Map<String,Object> map)
+    {
+        Calendar insatnce = Calendar.getInstance();
+        insatnce.add(Calendar.DATE,7);
+
+        JWTCreator.Builder builder = JWT.create();
+
+        map.forEach((k, v) -> {
+            if (v instanceof Long)
+            {
+                builder.withClaim(k,(Long)v);
+            }
+            else if (v instanceof String)
+            {
+                builder.withClaim(k,(String)v);
+            }
+        });
+
+        String token = builder.withExpiresAt(insatnce.getTime()).sign(Algorithm.HMAC256(SING));
+        return token;
+    }
+
+    public static DecodedJWT verify(String token)
+    {
+        try {
+            DecodedJWT verify = JWT.require(Algorithm.HMAC256(SING)).build().verify(token);
+            return verify;
+        }catch (Exception e)
+        {
+            return null;
+        }
+    }
+}
Index: account/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/pom.xml	(date 1599118346100)
+++ account/pom.xml	(date 1599118346100)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>spring_cloud_take-out</artifactId>
+        <groupId>com.sy</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>account</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-config</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.mybatis.spring.boot</groupId>
+            <artifactId>mybatis-spring-boot-starter</artifactId>
+            <version>2.1.3</version>
+        </dependency>
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <version>8.0.21</version>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: zuul/src/main/java/com/sy/ZuulApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul/src/main/java/com/sy/ZuulApplication.java	(date 1599929738512)
+++ zuul/src/main/java/com/sy/ZuulApplication.java	(date 1599929738512)
@@ -0,0 +1,51 @@
+package com.sy;
+
+import com.sy.filter.PreFilter;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
+import org.springframework.context.annotation.Bean;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+import org.springframework.web.filter.CorsFilter;
+
+@EnableZuulProxy
+@EnableAutoConfiguration
+public class ZuulApplication
+{
+    public static void main(String[] args)
+    {
+        SpringApplication.run(ZuulApplication.class,args);
+    }
+
+    @Bean
+    public PreFilter preFilter()
+    {
+        return new PreFilter();
+    }
+
+    @Bean
+    public CorsFilter corsFilter() {
+        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        final CorsConfiguration config = new CorsConfiguration();
+        //允许跨域
+        config.setAllowCredentials(true);
+        //允许向该服务器提交请求的URI,*表示全部
+        config.addAllowedOrigin("*");
+        //允许访问的头信息,*表示全部
+        config.addAllowedHeader("*");
+        //允许的method
+        config.addAllowedMethod("OPTIONS");
+        config.addAllowedMethod("HEAD");
+        config.addAllowedMethod("GET");
+        config.addAllowedMethod("PUT");
+        config.addAllowedMethod("POST");
+        config.addAllowedMethod("DELETE");
+        config.addAllowedMethod("PATCH");
+        //免检时间,单位是秒
+        config.setMaxAge(3600L);
+        //Enabling CORS for the whole application
+        source.registerCorsConfiguration("/**", config);
+        return new CorsFilter(source);
+    }
+}
Index: zuul/src/main/java/com/sy/filter/PreFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul/src/main/java/com/sy/filter/PreFilter.java	(date 1599928402697)
+++ zuul/src/main/java/com/sy/filter/PreFilter.java	(date 1599928402697)
@@ -0,0 +1,83 @@
+package com.sy.filter;
+
+import com.auth0.jwt.interfaces.DecodedJWT;
+import com.netflix.zuul.ZuulFilter;
+import com.netflix.zuul.context.RequestContext;
+import com.netflix.zuul.exception.ZuulException;
+import com.sy.utils.JWTUtils;
+
+import javax.servlet.http.HttpServletRequest;
+
+public class PreFilter extends ZuulFilter
+{
+
+    @Override
+    public String filterType() {
+        // 过滤器类型，可选值有 pre、route、post、error。
+        return "pre";
+    }
+
+    @Override
+    public int filterOrder() {
+        //  过滤器的执行顺序，数值越小，优先级越高。
+        return 1;
+    }
+
+    @Override
+    public boolean shouldFilter() {
+        //  是否执行该过滤器，true 为执行，false 为不执行，这个也可以利用配置中心来实现，达到动态的开启和关闭过滤器。
+        //  RequestContext.getCurrentContext();获取请求的上下文信息对象
+        //  再使用.getRequest()获取 HttpServletRequest 对象
+        //  再通过.getRequestURI() 方法可获取到请求路径
+        RequestContext requestContext = RequestContext.getCurrentContext();
+        HttpServletRequest request = requestContext.getRequest();
+
+        System.out.println("============================================"+request.getRequestURI());
+        if("/client/Accountclient/userAccount".equals(request.getRequestURI()))
+        {
+            return false;
+        }
+        else if ("/client/Accountclient/adminAccount".equals(request.getRequestURI()))
+        {
+            return false;
+        }else if ("/client/Userclient/save".equals(request.getRequestURI()))
+        {
+            return false;
+        }
+        else
+        {
+            return true;
+        }
+    }
+
+    @Override
+    public Object run() throws ZuulException
+    {
+        //  RequestContext.getCurrentContext();获取请求的上下文信息对象
+        //  再使用.getRequest()获取 HttpServletRequest 对象
+        //  再通过.getRequestURI() 方法可获取到请求路径
+        RequestContext requestContext = RequestContext.getCurrentContext();
+        HttpServletRequest request = requestContext.getRequest();
+        //获取请求头中的token对象
+        String token = request.getHeader("Authorization");
+
+        System.out.println("=========================================="+token);
+        if(JWTUtils.verify(token)==null)
+        {
+
+            //  如果未通过验证，则终止该请求进行路由,并设置返回状态码为401
+            requestContext.setSendZuulResponse(false);
+            requestContext.setResponseStatusCode(401);
+
+        }
+        else
+        {
+            DecodedJWT decodedJWT = JWTUtils.verify(token);
+            System.out.println("============================"+decodedJWT.getExpiresAt());
+            //  如果通过验证，则对该请求进行路由,并设置返回状态码为200
+            requestContext.setSendZuulResponse(true);
+            requestContext.setResponseStatusCode(200);
+        }
+        return null;
+    }
+}
Index: client/src/main/java/com/sy/utils/JWTUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/utils/JWTUtils.java	(date 1599994711893)
+++ client/src/main/java/com/sy/utils/JWTUtils.java	(date 1599994711893)
@@ -0,0 +1,41 @@
+package com.sy.utils;
+
+import com.auth0.jwt.JWT;
+import com.auth0.jwt.JWTCreator;
+import com.auth0.jwt.algorithms.Algorithm;
+import com.auth0.jwt.interfaces.DecodedJWT;
+
+import java.util.Calendar;
+import java.util.Map;
+
+public class JWTUtils
+{
+    private static final String SING = "!qsxqw#sdsdf^ssdwe";
+    public static String getToken(Map<String,Object> map)
+    {
+        Calendar insatnce = Calendar.getInstance();
+        insatnce.add(Calendar.DATE ,7);
+
+        JWTCreator.Builder builder = JWT.create();
+
+        map.forEach((k, v) -> {
+            if (v instanceof Long)
+            {
+                builder.withClaim(k,(Long)v);
+            }
+            else if (v instanceof String)
+            {
+                builder.withClaim(k,(String)v);
+            }
+        });
+
+        String token = builder.withExpiresAt(insatnce.getTime()).sign(Algorithm.HMAC256(SING));
+        return token;
+    }
+
+    public static DecodedJWT verify(String token)
+    {
+        DecodedJWT verify = JWT.require(Algorithm.HMAC256(SING)).build().verify(token);
+        return verify;
+    }
+}
Index: menu/menu.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/menu.iml	(date 1598789766315)
+++ menu/menu.iml	(date 1598789766315)
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4" />
\ No newline at end of file
Index: menu/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/pom.xml	(date 1598792098053)
+++ menu/pom.xml	(date 1598792098053)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>spring_cloud_take-out</artifactId>
+        <groupId>com.sy</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>menu</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-config</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.mybatis.spring.boot</groupId>
+            <artifactId>mybatis-spring-boot-starter</artifactId>
+            <version>2.1.3</version>
+        </dependency>
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <version>8.0.21</version>
+        </dependency>
+    </dependencies>
+
+
+</project>
\ No newline at end of file
Index: order/src/main/java/com/sy/handler/OrderHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/java/com/sy/handler/OrderHandler.java	(date 1599496655590)
+++ order/src/main/java/com/sy/handler/OrderHandler.java	(date 1599496655590)
@@ -0,0 +1,72 @@
+package com.sy.handler;
+
+import com.sy.beans.Order;
+import com.sy.repository.OrderRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+
+@RestController
+@RequestMapping("/order")
+public class OrderHandler
+{
+    @Autowired
+    private OrderRepository orderRepository;
+
+    @GetMapping("/findByUid/{index}/{limit}/{uid}")
+    public List<Order> findByUid(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("uid") Long uid)
+    {
+        index=(index-1)*limit;
+        return orderRepository.findByUid(index,limit,uid);
+    }
+
+    @PostMapping("/save")
+    public void save(@RequestBody Order order)
+    {
+        Calendar calendar= Calendar.getInstance();
+        Date date=calendar.getTime();
+        order.setDate(date);
+        orderRepository.save(order);
+    }
+
+    @DeleteMapping("/deleteById/{id}")
+    public void deleteById(@PathVariable Long id)
+    {
+        orderRepository.deleteById(id);
+    }
+
+    @GetMapping("/countByUid/{uid}")
+    public int countByUid(@PathVariable("uid") Long uid)
+    {
+        return orderRepository.countByUid(uid);
+    }
+
+    @GetMapping("/findByState/{index}/{limit}/{state}")
+    public List<Order> findByState(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("state") Long state)
+    {
+        index=(index-1)*limit;
+        return orderRepository.findByState(index,limit,state);
+    }
+
+    @GetMapping("/findByStateOne/{index}/{limit}/{state}")
+    public List<Order> findByStateOne(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("state") Long state)
+    {
+        index=(index-1)*limit;
+        return orderRepository.findByStateOne(index,limit,state);
+    }
+
+    @GetMapping("/countByState/{state}")
+    public int countByState(@PathVariable("state") Long state)
+    {
+        return orderRepository.countByState(state);
+    }
+
+    @PostMapping("/updateById")
+    public void updateById(@RequestBody Order order)
+    {
+        orderRepository.updateById(order);
+    }
+}
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/uiDesigner.xml	(date 1598787368152)
+++ .idea/uiDesigner.xml	(date 1598787368152)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: order/src/main/java/com/sy/OrderApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/java/com/sy/OrderApplication.java	(date 1599231195328)
+++ order/src/main/java/com/sy/OrderApplication.java	(date 1599231195328)
@@ -0,0 +1,15 @@
+package com.sy;
+
+import org.mybatis.spring.annotation.MapperScan;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+@MapperScan("com.sy.repository")
+public class OrderApplication
+{
+    public static void main(String[] args)
+    {
+        SpringApplication.run(OrderApplication.class,args);
+    }
+}
Index: order/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/resources/bootstrap.yml	(date 1598787093235)
+++ order/src/main/resources/bootstrap.yml	(date 1598787093235)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: order
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: order/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/pom.xml	(date 1599231154811)
+++ order/pom.xml	(date 1599231154811)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>spring_cloud_take-out</artifactId>
+        <groupId>com.sy</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>order</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-config</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.mybatis.spring.boot</groupId>
+            <artifactId>mybatis-spring-boot-starter</artifactId>
+            <version>2.1.3</version>
+        </dependency>
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <version>8.0.21</version>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: config/order-dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/order-dev.yml	(date 1599224143293)
+++ config/order-dev.yml	(date 1599224143293)
@@ -0,0 +1,17 @@
+server:
+  port: 8010
+spring:
+  application:
+    name: order
+  datasource:
+    url: jdbc:mysql://localhost:3306/testjdbc?serverTimezone=GMT%2B8
+    username: root
+    password: shiyan831529
+    driver-class-name: com.mysql.cj.jdbc.Driver
+mybatis:
+  mapper-locations: classpath:/mapping/*.xml
+  type-aliases-package: com.sy.beans
+eureka:
+  client:
+    service-url:
+      defaultZone: http://localhost:8761/eureka/
\ No newline at end of file
Index: configserver/src/main/java/com/sy/ConfigServerApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- configserver/src/main/java/com/sy/ConfigServerApplication.java	(date 1598785122334)
+++ configserver/src/main/java/com/sy/ConfigServerApplication.java	(date 1598785122334)
@@ -0,0 +1,15 @@
+package com.sy;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.config.server.EnableConfigServer;
+
+@SpringBootApplication
+@EnableConfigServer
+public class ConfigServerApplication
+{
+    public static void main(String[] args)
+    {
+        SpringApplication.run(ConfigServerApplication.class,args);
+    }
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1600004651617)
+++ .idea/vcs.xml	(date 1600004651617)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: configserver/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- configserver/src/main/resources/application.yml	(date 1600004492533)
+++ configserver/src/main/resources/application.yml	(date 1600004492533)
@@ -0,0 +1,19 @@
+server:
+  port: 8762
+spring:
+  application:
+    name: config-singe-server
+  cloud:
+    config:
+      server:
+        git:
+          uri: https://github.com/suqingrashii/spring_cloud_take_out-master.git
+          default-label: master
+          search-paths: config
+          username:
+          password:
+
+eureka:
+  client:
+    serviceUrl:
+      defaultZone: http://localhost:8761/eureka/
\ No newline at end of file
Index: configserver/configserver.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- configserver/configserver.iml	(date 1598784978351)
+++ configserver/configserver.iml	(date 1598784978351)
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4" />
\ No newline at end of file
Index: eurekaserver/target/classes/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- eurekaserver/target/classes/application.yml	(date 1599921577679)
+++ eurekaserver/target/classes/application.yml	(date 1599921577679)
@@ -0,0 +1,8 @@
+server:
+  port: 8761
+eureka:
+  client:
+    register-with-eureka: false
+    fetch-registry: false
+    service-url:
+      defaultZone: http://localhost:8761/eureka/
\ No newline at end of file
Index: configserver/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- configserver/pom.xml	(date 1598784945025)
+++ configserver/pom.xml	(date 1598784945025)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>spring_cloud_take-out</artifactId>
+        <groupId>com.sy</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>configserver</artifactId>
+    <dependencies>
+    <!--  config配置文件仓库依赖  -->
+    <dependency>
+        <groupId>org.springframework.cloud</groupId>
+        <artifactId>spring-cloud-config-server</artifactId>
+    </dependency>
+</dependencies>
+
+</project>
\ No newline at end of file
Index: zuul/zuul.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul/zuul.iml	(date 1599808621829)
+++ zuul/zuul.iml	(date 1599808621829)
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4" />
\ No newline at end of file
Index: account/target/classes/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/target/classes/bootstrap.yml	(date 1599119003657)
+++ account/target/classes/bootstrap.yml	(date 1599119003657)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: account
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1598782375825)
+++ .idea/jarRepositories.xml	(date 1598782375825)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="http://maven.aliyun.com/nexus/content/repositories/central/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: eurekaserver/src/main/java/com/sy/EurekaServerApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- eurekaserver/src/main/java/com/sy/EurekaServerApplication.java	(date 1598784656032)
+++ eurekaserver/src/main/java/com/sy/EurekaServerApplication.java	(date 1598784656032)
@@ -0,0 +1,14 @@
+package com.sy;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
+
+@SpringBootApplication
+@EnableEurekaServer
+public class EurekaServerApplication
+{
+    public static void main(String[] args) {
+        SpringApplication.run(EurekaServerApplication.class,args);
+    }
+}
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1599987145067)
+++ .idea/compiler.xml	(date 1599987145067)
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="user" />
+        <module name="zuul" />
+        <module name="menu" />
+        <module name="order" />
+        <module name="account" />
+        <module name="configserver" />
+        <module name="eurekaserver" />
+        <module name="client" />
+      </profile>
+    </annotationProcessing>
+  </component>
+  <component name="JavacSettings">
+    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
+      <module name="account" options="-parameters" />
+      <module name="client" options="-parameters" />
+      <module name="configserver" options="-parameters" />
+      <module name="eurekaserver" options="-parameters" />
+      <module name="menu" options="-parameters" />
+      <module name="order" options="-parameters" />
+      <module name="spring_cloud_take-out" options="-parameters" />
+      <module name="user" options="-parameters" />
+      <module name="zuul" options="-parameters" />
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: user/target/classes/mapping/UserRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/target/classes/mapping/UserRepository.xml	(date 1599558716854)
+++ user/target/classes/mapping/UserRepository.xml	(date 1599558716854)
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.UserRepository">
+
+    <select id="findAll" resultType="User">
+        select *
+        from t_user limit #{param1},#{param2};
+    </select>
+    <select id="count" resultType="int">
+		select count(id) from t_user;
+	</select>
+    <select id="findById" parameterType="java.lang.Long" resultType="User">
+        select *
+        from t_user
+        where id = #{id};
+    </select>
+    <insert id="save" parameterType="User">
+        insert into t_user(username,password,nickname,gender,telephone,registerdate,address)
+        values (#{username},#{password},#{nickname},#{gender},#{telephone},#{registerdate},#{address});
+    </insert>
+    <update id="update" parameterType="User">
+        update t_user
+        <set>
+            <if test="nickname!=null and nickname!=''">
+                ,nickname = #{nickname}
+            </if>
+            <if test="gender!=null and gender!=''">
+                ,gender = #{gender}
+            </if>
+            <if test="telephone!=null and telephone!=''">
+                ,telephone = #{telephone}
+            </if>
+            <if test="address!=null and address!=''">
+                ,address = #{address}
+            </if>
+        </set>
+        <where>
+            id = #{id};
+        </where>
+    </update>
+    <update id="updateById" parameterType="User">
+        update t_user
+        <set>
+            <if test="password!=null and password!=''">
+                ,password = #{password}
+            </if>
+        </set>
+        <where>
+            id = #{id};
+        </where>
+    </update>
+    <delete id="deleteById" parameterType="java.lang.Long">
+        delete from t_user
+        where id = #{id};
+    </delete>
+</mapper>
\ No newline at end of file
Index: account/target/classes/mapping/UserRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/target/classes/mapping/UserRepository.xml	(date 1599124428273)
+++ account/target/classes/mapping/UserRepository.xml	(date 1599124428273)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.UserRepository">
+    <select id="userAccount" parameterType="User" resultType="User">
+        select *
+        from t_user
+        where username = #{username}
+        and password = #{password};
+    </select>
+</mapper>
\ No newline at end of file
Index: eurekaserver/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- eurekaserver/src/main/resources/application.yml	(date 1598784572920)
+++ eurekaserver/src/main/resources/application.yml	(date 1598784572920)
@@ -0,0 +1,8 @@
+server:
+  port: 8761
+eureka:
+  client:
+    register-with-eureka: false
+    fetch-registry: false
+    service-url:
+      defaultZone: http://localhost:8761/eureka/
\ No newline at end of file
Index: eurekaserver/eurekaserver.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- eurekaserver/eurekaserver.iml	(date 1598784482567)
+++ eurekaserver/eurekaserver.iml	(date 1598784482567)
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4" />
\ No newline at end of file
Index: zuul/target/classes/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul/target/classes/bootstrap.yml	(date 1599990684517)
+++ zuul/target/classes/bootstrap.yml	(date 1599990684517)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: gateway
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: user/target/classes/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/target/classes/bootstrap.yml	(date 1598956637078)
+++ user/target/classes/bootstrap.yml	(date 1598956637078)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: user
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: eurekaserver/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- eurekaserver/pom.xml	(date 1598786816915)
+++ eurekaserver/pom.xml	(date 1598786816915)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>spring_cloud_take-out</artifactId>
+        <groupId>com.sy</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>eurekaserver</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: menu/target/classes/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/target/classes/bootstrap.yml	(date 1598792141502)
+++ menu/target/classes/bootstrap.yml	(date 1598792141502)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: menu
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(date 1599808621850)
+++ .idea/encodings.xml	(date 1599808621850)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/account/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/client/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/configserver/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/eurekaserver/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/menu/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/order/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/user/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/zuul/src/main/java" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: zuul/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zuul/pom.xml	(date 1599990684542)
+++ zuul/pom.xml	(date 1599990684542)
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>spring_cloud_take-out</artifactId>
+        <groupId>com.sy</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>zuul</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-zuul</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-config</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.auth0</groupId>
+            <artifactId>java-jwt</artifactId>
+            <version>3.10.0</version>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: configserver/target/classes/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- configserver/target/classes/application.yml	(date 1599922463827)
+++ configserver/target/classes/application.yml	(date 1599922463827)
@@ -0,0 +1,19 @@
+server:
+  port: 8762
+spring:
+  application:
+    name: config-singe-server
+  cloud:
+    config:
+      server:
+        git:
+          uri: https://github.com/suqingrashii/spring_cloud_take_out-master.git
+          default-label: master
+          search-paths: config
+          username: 1678998570@qq.com
+          password: shiyan831529
+
+eureka:
+  client:
+    serviceUrl:
+      defaultZone: http://localhost:8761/eureka/
\ No newline at end of file
Index: client/src/main/java/com/sy/beans/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/beans/Order.java	(date 1599465345926)
+++ client/src/main/java/com/sy/beans/Order.java	(date 1599465345926)
@@ -0,0 +1,89 @@
+package com.sy.beans;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+
+import java.util.Date;
+
+public class Order
+{
+    private Long id;
+    private Menu menu;
+    private User user;
+    private Admin admin;
+//    @DateTimeFormat(pattern="yyyy-MM-dd")
+    @JsonFormat(shape=JsonFormat.Shape.STRING,pattern="yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
+    private Date date;
+    private Long state;
+
+    public Order(Long id, Menu menu, User user, Admin admin, Date date, Long state) {
+        this.id = id;
+        this.menu = menu;
+        this.user = user;
+        this.admin = admin;
+        this.date = date;
+        this.state = state;
+    }
+
+    public Order() {
+    }
+
+    @Override
+    public String toString() {
+        return "Order{" +
+                "id=" + id +
+                ", menu=" + menu +
+                ", user=" + user +
+                ", admin=" + admin +
+                ", date=" + date +
+                ", state=" + state +
+                '}';
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Menu getMenu() {
+        return menu;
+    }
+
+    public void setMenu(Menu menu) {
+        this.menu = menu;
+    }
+
+    public User getUser() {
+        return user;
+    }
+
+    public void setUser(User user) {
+        this.user = user;
+    }
+
+    public Admin getAdmin() {
+        return admin;
+    }
+
+    public void setAdmin(Admin admin) {
+        this.admin = admin;
+    }
+
+    public Date getDate() {
+        return date;
+    }
+
+    public void setDate(Date date) {
+        this.date = date;
+    }
+
+    public Long getState() {
+        return state;
+    }
+
+    public void setState(Long state) {
+        this.state = state;
+    }
+}
Index: account/target/classes/mapping/AdminRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/target/classes/mapping/AdminRepository.xml	(date 1599577301387)
+++ account/target/classes/mapping/AdminRepository.xml	(date 1599577301387)
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.AdminRepository">
+    <select id="adminAccount" parameterType="Admin" resultType="Admin">
+        select *
+        from t_admin
+        where username = #{username}
+        and password = #{password};
+    </select>
+
+    <select id="findByAdminId" parameterType="java.lang.Long" resultType="Admin">
+        select id,username
+        from t_admin
+        where id = #{id};
+    </select>
+    <update id="updateByAdminId" parameterType="Admin">
+        update t_admin
+        <set>
+            <if test="password!=null and password!=''">
+                ,password = #{password}
+            </if>
+        </set>
+        <where>
+            id = #{id};
+        </where>
+    </update>
+</mapper>
\ No newline at end of file
Index: client/src/main/java/com/sy/feign/OrderFeign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/feign/OrderFeign.java	(date 1599496655574)
+++ client/src/main/java/com/sy/feign/OrderFeign.java	(date 1599496655574)
@@ -0,0 +1,36 @@
+package com.sy.feign;
+
+import com.sy.beans.Order;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@FeignClient(value = "order")
+public interface OrderFeign
+{
+    @GetMapping("/order/findByUid/{index}/{limit}/{uid}")
+    public List<Order> findByUid(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("uid") Long uid);
+
+    @PostMapping("/order/save")
+    public void save(@RequestBody Order order);
+
+    @DeleteMapping("/order/deleteById/{id}")
+    public void deleteById(@PathVariable Long id);
+
+    @GetMapping("/order/countByUid/{uid}")
+    public int countByUid(@PathVariable("uid") Long uid);
+
+    @GetMapping("/order/findByState/{index}/{limit}/{state}")
+    public List<Order> findByState(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("state") Long state);
+
+    @GetMapping("/order/countByState/{state}")
+    public int countByState(@PathVariable("state") Long state);
+
+    @GetMapping("/order/findByStateOne/{index}/{limit}/{state}")
+    public List<Order> findByStateOne(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("state") Long state);
+
+    @PostMapping("/order/updateById")
+    public void updateById(@RequestBody Order order);
+
+}
Index: client/src/main/java/com/sy/handler/OrderHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/handler/OrderHandler.java	(date 1599496655574)
+++ client/src/main/java/com/sy/handler/OrderHandler.java	(date 1599496655574)
@@ -0,0 +1,68 @@
+package com.sy.handler;
+
+import com.sy.beans.Order;
+import com.sy.feign.OrderFeign;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequestMapping("/Orderclient")
+public class OrderHandler
+{
+    @Autowired
+    private OrderFeign orderFeign;
+
+    @GetMapping("/findByUid/{index}/{limit}/{uid}")
+    public List<Order> findByUid(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("uid") Long uid)
+    {
+        return orderFeign.findByUid(index,limit,uid);
+    }
+
+    @PostMapping("/save")
+    public Boolean save(@RequestBody Order order)
+    {
+        orderFeign.save(order);
+        return true;
+    }
+
+    @DeleteMapping("/deleteById/{id}")
+    public Boolean deleteById(@PathVariable Long id)
+    {
+        orderFeign.deleteById(id);
+        return true;
+    }
+
+    @GetMapping("/countByUid/{uid}")
+    public int countByUid(@PathVariable("uid") Long uid)
+    {
+        return orderFeign.countByUid(uid);
+    }
+
+    @GetMapping("/findByState/{index}/{limit}/{state}")
+    public List<Order> findByState(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("state") Long state)
+    {
+        return orderFeign.findByState(index,limit,state);
+    }
+
+    @GetMapping("/findByStateOne/{index}/{limit}/{state}")
+    public List<Order> findByStateOne(@PathVariable("index")int index, @PathVariable("limit")int limit , @PathVariable("state") Long state)
+    {
+        return orderFeign.findByStateOne(index,limit,state);
+    }
+
+    @GetMapping("/countByState/{state}")
+    public int countByState(@PathVariable("state") Long state)
+    {
+        return orderFeign.countByState(state);
+    }
+
+    @PostMapping("/updateById")
+    public Boolean updateById(@RequestBody Order order)
+    {
+        orderFeign.updateById(order);
+        return true;
+    }
+
+}
Index: order/src/main/java/com/sy/beans/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/java/com/sy/beans/Order.java	(date 1599465345911)
+++ order/src/main/java/com/sy/beans/Order.java	(date 1599465345911)
@@ -0,0 +1,89 @@
+package com.sy.beans;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+
+import java.util.Date;
+
+public class Order
+{
+    private Long id;
+    private Menu menu;
+    private User user;
+    private Admin admin;
+    //    @DateTimeFormat(pattern="yyyy-MM-dd")
+    @JsonFormat(shape=JsonFormat.Shape.STRING,pattern="yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
+    private Date date;
+    private Long state;
+
+    public Order(Long id, Menu menu, User user, Admin admin, Date date, Long state) {
+        this.id = id;
+        this.menu = menu;
+        this.user = user;
+        this.admin = admin;
+        this.date = date;
+        this.state = state;
+    }
+
+    public Order() {
+    }
+
+    @Override
+    public String toString() {
+        return "Order{" +
+                "id=" + id +
+                ", menu=" + menu +
+                ", user=" + user +
+                ", admin=" + admin +
+                ", date=" + date +
+                ", state=" + state +
+                '}';
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Menu getMenu() {
+        return menu;
+    }
+
+    public void setMenu(Menu menu) {
+        this.menu = menu;
+    }
+
+    public User getUser() {
+        return user;
+    }
+
+    public void setUser(User user) {
+        this.user = user;
+    }
+
+    public Admin getAdmin() {
+        return admin;
+    }
+
+    public void setAdmin(Admin admin) {
+        this.admin = admin;
+    }
+
+    public Date getDate() {
+        return date;
+    }
+
+    public void setDate(Date date) {
+        this.date = date;
+    }
+
+    public Long getState() {
+        return state;
+    }
+
+    public void setState(Long state) {
+        this.state = state;
+    }
+}
Index: order/src/main/resources/mapping/OrderRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/resources/mapping/OrderRepository.xml	(date 1599498412959)
+++ order/src/main/resources/mapping/OrderRepository.xml	(date 1599498412959)
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.OrderRepository">
+    <resultMap id="orderMap" type="Order">
+        <id property="id" column="o_id"/>
+        <result property="date" column="o_date"/>
+        <result property="state" column="o_state"/>
+        <!-- 映射menu -->
+        <association property="menu" javaType="Menu">
+            <id property="id" column="m_id"/>
+            <result property="name" column="m_name"/>
+            <result property="price" column="m_price"/>
+        </association>
+        <association property="user" javaType="User">
+            <id property="id" column="u_id"/>
+            <result property="nickname" column="u_name"/>
+            <result property="telephone" column="u_telephone"/>
+            <result property="address" column="u_address"/>
+        </association>
+        <association property="admin" javaType="Admin">
+            <id property="id" column="a_id"/>
+            <result property="username" column="a_name"/>
+        </association>
+    </resultMap>
+    <select id="findByUid" resultMap="orderMap">
+        select o.id o_id,o.date o_date,o.state o_state,m.name m_name,m.price m_price,u.address u_address
+        from t_order o,t_menu m,t_user u
+        where o.mid = m.id
+        and  o.uid = u.id
+        and o.uid = #{param3}
+        order by o_id limit #{param1},#{param2};
+    </select>
+    <select id="findByState" resultMap="orderMap">
+        select o.id o_id,o.date o_date,m.name m_name,u.nickname u_name,u.telephone u_telephone,u.address u_address
+        from t_order o,t_user u,t_menu m
+        where o.mid = m.id
+        and o.uid = u.id
+        and o.state = #{param3}
+        order by o_id limit #{param1},#{param2};
+    </select>
+    <select id="findByStateOne" resultMap="orderMap">
+        select o.id o_id,o.date o_date,m.name m_name,u.nickname u_name,u.telephone u_telephone,u.address u_address,a.username a_name
+        from t_order o,t_user u,t_menu m,t_admin a
+        where o.mid = m.id
+        and o.uid = u.id
+        and o.aid = a.id
+        and o.state = #{param3}
+        order by o_id limit #{param1},#{param2};
+    </select>
+    <insert id="save" parameterType="Order">
+        insert into t_order(uid,mid,date,state)
+        values (#{user.id},#{menu.id},#{date},0);
+    </insert>
+    <delete id="deleteById" parameterType="java.lang.Long">
+        delete from t_order
+        where id = #{id};
+    </delete>
+    <select id="countByUid" parameterType="java.lang.Long" resultType="int">
+		select count(uid)
+		from t_order
+		where uid  = #{typeId};
+	</select>
+
+    <select id="countByState" parameterType="java.lang.Long" resultType="int">
+		select count(state)
+		from t_order
+		where state  = #{state};
+	</select>
+
+    <update id="updateById" parameterType="Order">
+    update t_order
+    <set>
+        aid = #{admin.id},
+        state = 1,
+    </set>
+    <where>
+        id = #{id}
+    </where>
+    </update>
+</mapper>
\ No newline at end of file
Index: order/src/main/java/com/sy/repository/OrderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/java/com/sy/repository/OrderRepository.java	(date 1599494556500)
+++ order/src/main/java/com/sy/repository/OrderRepository.java	(date 1599494556500)
@@ -0,0 +1,24 @@
+package com.sy.repository;
+
+import com.sy.beans.Order;
+
+import java.util.List;
+
+public interface OrderRepository
+{
+    public List<Order> findByUid(int index, int limit , Long uid);
+
+    public void save(Order order);
+
+    public void deleteById(Long id);
+
+    public int countByUid(Long id);
+
+    public List<Order> findByState(int index, int limit , Long state);
+
+    public int countByState(Long state);
+
+    public List<Order> findByStateOne(int index, int limit , Long state);
+
+    public void updateById(Order order);
+}
Index: account/src/main/resources/mapping/AdminRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/resources/mapping/AdminRepository.xml	(date 1599577301387)
+++ account/src/main/resources/mapping/AdminRepository.xml	(date 1599577301387)
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.AdminRepository">
+    <select id="adminAccount" parameterType="Admin" resultType="Admin">
+        select *
+        from t_admin
+        where username = #{username}
+        and password = #{password};
+    </select>
+
+    <select id="findByAdminId" parameterType="java.lang.Long" resultType="Admin">
+        select id,username
+        from t_admin
+        where id = #{id};
+    </select>
+    <update id="updateByAdminId" parameterType="Admin">
+        update t_admin
+        <set>
+            <if test="password!=null and password!=''">
+                ,password = #{password}
+            </if>
+        </set>
+        <where>
+            id = #{id};
+        </where>
+    </update>
+</mapper>
\ No newline at end of file
Index: account/src/main/java/com/sy/handler/AccountHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/java/com/sy/handler/AccountHandler.java	(date 1599998492324)
+++ account/src/main/java/com/sy/handler/AccountHandler.java	(date 1599998492324)
@@ -0,0 +1,42 @@
+package com.sy.handler;
+
+import com.sy.beans.Admin;
+import com.sy.beans.User;
+import com.sy.repository.AdminRepository;
+import com.sy.repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/account")
+public class AccountHandler
+{
+    @Autowired
+    private AdminRepository adminRepository;
+    @Autowired
+    private UserRepository userRepository;
+
+    @PostMapping("/userAccount")
+    public User userAccount(@RequestBody User user )
+    {
+        return userRepository.userAccount(user);
+    }
+
+    @PostMapping("/adminAccount")
+    public Admin adminAccount(@RequestBody Admin admin )
+    {
+        return adminRepository.adminAccount(admin);
+    }
+
+    @GetMapping("/findByAdminId/{id}")
+    public Admin findByAdminId(@PathVariable("id") Long id)
+    {
+        return adminRepository.findByAdminId(id);
+    }
+
+    @PostMapping("/updateByAdminId")
+    public void updateByAdminId(@RequestBody Admin admin)
+    {
+        adminRepository.updateByAdminId(admin);
+    }
+}
Index: client/src/main/java/com/sy/handler/AccountHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/handler/AccountHandler.java	(date 1599998493401)
+++ client/src/main/java/com/sy/handler/AccountHandler.java	(date 1599998493401)
@@ -0,0 +1,68 @@
+package com.sy.handler;
+
+import com.sy.beans.Admin;
+import com.sy.beans.User;
+import com.sy.feign.AccountFeign;
+import com.sy.utils.JWTUtils;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.HashMap;
+import java.util.Map;
+
+@RestController
+@RequestMapping("/Accountclient")
+public class AccountHandler
+{
+    @Autowired
+    private AccountFeign accountFeign;
+
+    @PostMapping("/userAccount")
+    public String userAccount(@RequestBody User user)
+    {
+        User user01=accountFeign.userAccount(user);
+        if(user01 != null)
+        {
+            Map<String,Object> userMap = new HashMap<>();
+            userMap.put("id",user01.getId());
+            userMap.put("name",user01.getNickname());
+            userMap.put("authority","user");
+            String token = JWTUtils.getToken(userMap);
+            return token;
+        }else
+        {
+            return null;
+        }
+    }
+
+    @PostMapping("/adminAccount")
+    public String adminAccount(@RequestBody Admin admin)
+    {
+        Admin admin01=accountFeign.adminAccount(admin);
+        if(admin01 != null)
+        {
+            Map<String,Object> userMap = new HashMap<>();
+            userMap.put("id",admin01.getId());
+            userMap.put("name",admin01.getUsername());
+            userMap.put("authority","admin");
+            String token = JWTUtils.getToken(userMap);
+            return token;
+        }else
+        {
+            return null;
+        }
+    }
+
+    @GetMapping("/findByAdminId/{id}")
+    public Admin findByAdminId(@PathVariable("id") Long id)
+    {
+        return accountFeign.findByAdminId(id);
+    }
+
+    @PostMapping("/updateByAdminId")
+    public boolean updateByAdminId(@RequestBody Admin admin)
+    {
+        accountFeign.updateByAdminId(admin);
+        return true;
+    }
+}
\ No newline at end of file
Index: client/src/main/java/com/sy/beans/Admin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/beans/Admin.java	(date 1599123586511)
+++ client/src/main/java/com/sy/beans/Admin.java	(date 1599123586511)
@@ -0,0 +1,50 @@
+package com.sy.beans;
+
+public class Admin
+{
+    private Long id;
+    private String username;
+    private String password;
+
+    public Admin(Long id, String username, String password) {
+        this.id = id;
+        this.username = username;
+        this.password = password;
+    }
+
+    public Admin() {
+    }
+
+    @Override
+    public String toString() {
+        return "Admin{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                ", password='" + password + '\'' +
+                '}';
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+}
Index: client/src/main/java/com/sy/feign/AccountFeign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/feign/AccountFeign.java	(date 1599577576259)
+++ client/src/main/java/com/sy/feign/AccountFeign.java	(date 1599577576259)
@@ -0,0 +1,25 @@
+package com.sy.feign;
+
+import com.sy.beans.Admin;
+import com.sy.beans.User;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+
+@FeignClient(value = "account")
+public interface AccountFeign
+{
+    @PostMapping("/account/userAccount")
+    public User userAccount(@RequestBody User user );
+
+    @PostMapping("/account/adminAccount")
+    public Admin adminAccount(@RequestBody Admin admin );
+
+    @GetMapping("/account/findByAdminId/{id}")
+    public Admin findByAdminId(@PathVariable("id") Long id);
+
+    @PostMapping("/account/updateByAdminId")
+    public void updateByAdminId(@RequestBody Admin admin);
+}
Index: account/src/main/resources/mapping/UserRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/resources/mapping/UserRepository.xml	(date 1599124428273)
+++ account/src/main/resources/mapping/UserRepository.xml	(date 1599124428273)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.UserRepository">
+    <select id="userAccount" parameterType="User" resultType="User">
+        select *
+        from t_user
+        where username = #{username}
+        and password = #{password};
+    </select>
+</mapper>
\ No newline at end of file
Index: menu/target/classes/mapping/MenuRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menu/target/classes/mapping/MenuRepository.xml	(date 1599204375198)
+++ menu/target/classes/mapping/MenuRepository.xml	(date 1599204375198)
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.MenuRepository">
+    <resultMap id="menuMap" type="Menu">
+        <id property="id" column="mid"/>
+        <result property="name" column="mname"/>
+        <result property="author" column="author"/>
+        <result property="price" column="price"/>
+        <result property="flavor" column="flavor"/>
+        <!-- 映射type -->
+        <association property="type" javaType="Type">
+            <id property="id" column="tid"/>
+            <result property="name" column="tname"/>
+        </association>
+    </resultMap>
+    <select id="findAll" resultMap="menuMap">
+        select m.id mid,m.name mname,m.price,m.flavor,t.id tid,t.name tname
+        from t_menu m,t_type t
+        where m.tid = t.id
+        order by mid limit #{param1},#{param2}
+    </select>
+    <select id="count" resultType="int">
+		select count(id) from t_menu;
+	</select>
+    <select id="findById" parameterType="java.lang.Long" resultMap="menuMap">
+        select m.id mid,m.name mname,m.price,m.flavor,t.id tid,t.name tname
+        from t_menu m,t_type t
+        where m.tid = t.id
+        and m.id = #{id};
+    </select>
+    <insert id="save" parameterType="Menu">
+        insert into t_menu(name,price,flavor,tid)
+        values (#{name},#{price},#{flavor},#{type.id});
+    </insert>
+    <update id="update" parameterType="Menu">
+        update t_menu
+        <set>
+            <if test="name!=null and name!=''">
+                name = #{name}
+            </if>
+            <if test="price!=null and price!=''">
+                ,price = #{price}
+            </if>
+            <if test="flavor!=null and flavor!=''">
+                ,flavor = #{flavor}
+            </if>
+                ,tid = #{type.id}
+        </set>
+        <where>
+            id = #{id}
+        </where>
+    </update>
+    <delete id="deleteById" parameterType="java.lang.Long">
+        delete from t_menu
+        where id = #{id};
+    </delete>
+    <select id="countByTid" parameterType="java.lang.Long" resultType="int">
+		select count(id)
+		from t_menu
+		where tid  = #{typeId};
+	</select>
+    <select id="findByTid" resultType="Menu">
+        select *
+        from t_menu
+        where tid  = #{param3}
+        order by id limit #{param1},#{param2};
+    </select>
+</mapper>
\ No newline at end of file
Index: account/src/main/java/com/sy/beans/Admin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/java/com/sy/beans/Admin.java	(date 1599123586511)
+++ account/src/main/java/com/sy/beans/Admin.java	(date 1599123586511)
@@ -0,0 +1,50 @@
+package com.sy.beans;
+
+public class Admin
+{
+    private Long id;
+    private String username;
+    private String password;
+
+    public Admin(Long id, String username, String password) {
+        this.id = id;
+        this.username = username;
+        this.password = password;
+    }
+
+    public Admin() {
+    }
+
+    @Override
+    public String toString() {
+        return "Admin{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                ", password='" + password + '\'' +
+                '}';
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+}
Index: order/target/classes/mapping/OrderRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/target/classes/mapping/OrderRepository.xml	(date 1599498412959)
+++ order/target/classes/mapping/OrderRepository.xml	(date 1599498412959)
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.OrderRepository">
+    <resultMap id="orderMap" type="Order">
+        <id property="id" column="o_id"/>
+        <result property="date" column="o_date"/>
+        <result property="state" column="o_state"/>
+        <!-- 映射menu -->
+        <association property="menu" javaType="Menu">
+            <id property="id" column="m_id"/>
+            <result property="name" column="m_name"/>
+            <result property="price" column="m_price"/>
+        </association>
+        <association property="user" javaType="User">
+            <id property="id" column="u_id"/>
+            <result property="nickname" column="u_name"/>
+            <result property="telephone" column="u_telephone"/>
+            <result property="address" column="u_address"/>
+        </association>
+        <association property="admin" javaType="Admin">
+            <id property="id" column="a_id"/>
+            <result property="username" column="a_name"/>
+        </association>
+    </resultMap>
+    <select id="findByUid" resultMap="orderMap">
+        select o.id o_id,o.date o_date,o.state o_state,m.name m_name,m.price m_price,u.address u_address
+        from t_order o,t_menu m,t_user u
+        where o.mid = m.id
+        and  o.uid = u.id
+        and o.uid = #{param3}
+        order by o_id limit #{param1},#{param2};
+    </select>
+    <select id="findByState" resultMap="orderMap">
+        select o.id o_id,o.date o_date,m.name m_name,u.nickname u_name,u.telephone u_telephone,u.address u_address
+        from t_order o,t_user u,t_menu m
+        where o.mid = m.id
+        and o.uid = u.id
+        and o.state = #{param3}
+        order by o_id limit #{param1},#{param2};
+    </select>
+    <select id="findByStateOne" resultMap="orderMap">
+        select o.id o_id,o.date o_date,m.name m_name,u.nickname u_name,u.telephone u_telephone,u.address u_address,a.username a_name
+        from t_order o,t_user u,t_menu m,t_admin a
+        where o.mid = m.id
+        and o.uid = u.id
+        and o.aid = a.id
+        and o.state = #{param3}
+        order by o_id limit #{param1},#{param2};
+    </select>
+    <insert id="save" parameterType="Order">
+        insert into t_order(uid,mid,date,state)
+        values (#{user.id},#{menu.id},#{date},0);
+    </insert>
+    <delete id="deleteById" parameterType="java.lang.Long">
+        delete from t_order
+        where id = #{id};
+    </delete>
+    <select id="countByUid" parameterType="java.lang.Long" resultType="int">
+		select count(uid)
+		from t_order
+		where uid  = #{typeId};
+	</select>
+
+    <select id="countByState" parameterType="java.lang.Long" resultType="int">
+		select count(state)
+		from t_order
+		where state  = #{state};
+	</select>
+
+    <update id="updateById" parameterType="Order">
+    update t_order
+    <set>
+        aid = #{admin.id},
+        state = 1,
+    </set>
+    <where>
+        id = #{id}
+    </where>
+    </update>
+</mapper>
\ No newline at end of file
Index: account/src/main/java/com/sy/beans/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/java/com/sy/beans/User.java	(date 1599123852805)
+++ account/src/main/java/com/sy/beans/User.java	(date 1599123852805)
@@ -0,0 +1,112 @@
+package com.sy.beans;
+
+import org.springframework.format.annotation.DateTimeFormat;
+
+import java.util.Date;
+
+public class User
+{
+    private Long id;
+    private String username;
+    private String password;
+    private String nickname;
+    private String gender;
+    private String telephone;
+    @DateTimeFormat(pattern="yyyy-MM-dd")
+    private Date registerdate;
+    private String address;
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public User(Long id, String username, String password, String nickname,
+                String gender, String telephone, Date registerdate, String address) {
+        this.id = id;
+        this.username = username;
+        this.password = password;
+        this.nickname = nickname;
+        this.gender = gender;
+        this.telephone = telephone;
+        this.registerdate = registerdate;
+        this.address = address;
+    }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                ", password='" + password + '\'' +
+                ", nickname='" + nickname + '\'' +
+                ", gender='" + gender + '\'' +
+                ", telephone='" + telephone + '\'' +
+                ", registerdate=" + registerdate +
+                ", address='" + address + '\'' +
+                '}';
+    }
+
+    public User() {
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getNickname() {
+        return nickname;
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+    }
+
+    public String getGender() {
+        return gender;
+    }
+
+    public void setGender(String gender) {
+        this.gender = gender;
+    }
+
+    public String getTelephone() {
+        return telephone;
+    }
+
+    public void setTelephone(String telephone) {
+        this.telephone = telephone;
+    }
+
+    public Date getRegisterdate() {
+        return registerdate;
+    }
+
+    public void setRegisterdate(Date registerdate) {
+        this.registerdate = registerdate;
+    }
+
+}
Index: account/src/main/java/com/sy/repository/AdminRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/java/com/sy/repository/AdminRepository.java	(date 1599577301419)
+++ account/src/main/java/com/sy/repository/AdminRepository.java	(date 1599577301419)
@@ -0,0 +1,12 @@
+package com.sy.repository;
+
+import com.sy.beans.Admin;
+
+public interface AdminRepository
+{
+    public Admin adminAccount(Admin admin);
+
+    public Admin findByAdminId(Long id);
+
+    public void updateByAdminId(Admin admin);
+}
Index: client/target/classes/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/target/classes/bootstrap.yml	(date 1598960448272)
+++ client/target/classes/bootstrap.yml	(date 1598960448272)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: client
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
Index: account/src/main/java/com/sy/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/java/com/sy/repository/UserRepository.java	(date 1599123852765)
+++ account/src/main/java/com/sy/repository/UserRepository.java	(date 1599123852765)
@@ -0,0 +1,8 @@
+package com.sy.repository;
+
+import com.sy.beans.User;
+
+public interface UserRepository
+{
+    public User userAccount(User user);
+}
Index: order/src/main/java/com/sy/beans/Type.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/java/com/sy/beans/Type.java	(date 1598866533824)
+++ order/src/main/java/com/sy/beans/Type.java	(date 1598866533824)
@@ -0,0 +1,38 @@
+package com.sy.beans;
+
+public class Type {
+    private long id;
+    private String name;
+
+    public Type(long id, String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+    public Type() {
+    }
+
+    @Override
+    public String toString() {
+        return "Type{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                '}';
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+}
Index: account/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account/src/main/resources/bootstrap.yml	(date 1599119003657)
+++ account/src/main/resources/bootstrap.yml	(date 1599119003657)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: account
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: order/src/main/java/com/sy/beans/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/java/com/sy/beans/User.java	(date 1599061874836)
+++ order/src/main/java/com/sy/beans/User.java	(date 1599061874836)
@@ -0,0 +1,112 @@
+package com.sy.beans;
+
+import org.springframework.format.annotation.DateTimeFormat;
+
+import java.util.Date;
+
+public class User
+{
+    private Long id;
+    private String username;
+    private String password;
+    private String nickname;
+    private String gender;
+    private String telephone;
+    @DateTimeFormat(pattern="yyyy-MM-dd")
+    private Date registerdate;
+    private String address;
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public User(Long id, String username, String password, String nickname,
+                String gender, String telephone, Date registerdate, String address) {
+        this.id = id;
+        this.username = username;
+        this.password = password;
+        this.nickname = nickname;
+        this.gender = gender;
+        this.telephone = telephone;
+        this.registerdate = registerdate;
+        this.address = address;
+    }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                ", password='" + password + '\'' +
+                ", nickname='" + nickname + '\'' +
+                ", gender='" + gender + '\'' +
+                ", telephone='" + telephone + '\'' +
+                ", registerdate=" + registerdate +
+                ", address='" + address + '\'' +
+                '}';
+    }
+
+    public User() {
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getNickname() {
+        return nickname;
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+    }
+
+    public String getGender() {
+        return gender;
+    }
+
+    public void setGender(String gender) {
+        this.gender = gender;
+    }
+
+    public String getTelephone() {
+        return telephone;
+    }
+
+    public void setTelephone(String telephone) {
+        this.telephone = telephone;
+    }
+
+    public Date getRegisterdate() {
+        return registerdate;
+    }
+
+    public void setRegisterdate(Date registerdate) {
+        this.registerdate = registerdate;
+    }
+
+}
Index: order/src/main/java/com/sy/beans/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- order/src/main/java/com/sy/beans/Menu.java	(date 1598866522182)
+++ order/src/main/java/com/sy/beans/Menu.java	(date 1598866522182)
@@ -0,0 +1,72 @@
+package com.sy.beans;
+
+public class Menu
+{
+    private Long id;
+    private String name;
+    private Double price;
+    private String flavor;
+    private Type type;
+
+    public Menu(Long id, String name, Double price, String flavor, Type type) {
+        this.id = id;
+        this.name = name;
+        this.price = price;
+        this.flavor = flavor;
+        this.type = type;
+    }
+
+    public Menu() {
+    }
+
+    @Override
+    public String toString() {
+        return "Menu{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", price=" + price +
+                ", flavor='" + flavor + '\'' +
+                ", type=" + type +
+                '}';
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Double getPrice() {
+        return price;
+    }
+
+    public void setPrice(Double price) {
+        this.price = price;
+    }
+
+    public String getFlavor() {
+        return flavor;
+    }
+
+    public void setFlavor(String flavor) {
+        this.flavor = flavor;
+    }
+
+    public Type getType() {
+        return type;
+    }
+
+    public void setType(Type type) {
+        this.type = type;
+    }
+}
Index: client/src/main/java/com/sy/feign/MenuFeignError.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/feign/MenuFeignError.java	(date 1599203387229)
+++ client/src/main/java/com/sy/feign/MenuFeignError.java	(date 1599203387229)
@@ -0,0 +1,51 @@
+package com.sy.feign;
+
+import com.sy.beans.Menu;
+import org.springframework.stereotype.Component;
+
+import java.util.List;
+
+@Component
+public class MenuFeignError implements MenuFeign
+{
+    @Override
+    public List<Menu> findAll(int index, int limit) {
+        return null;
+    }
+
+    @Override
+    public int count() {
+        return 0;
+    }
+
+    @Override
+    public Menu findById(Long id) {
+        return null;
+    }
+
+    @Override
+    public boolean update(Menu menu) {
+        return false;
+    }
+
+    @Override
+    public boolean deleteById(Long id) {
+        return false;
+    }
+
+    @Override
+    public boolean save(Menu menu) {
+        return false;
+    }
+
+    @Override
+    public int countByTid(Long typeId) {
+        return 0;
+    }
+
+    @Override
+    public List<Menu> findByTid(int index, int limit, Long typeId) {
+        return null;
+    }
+
+}
Index: client/src/main/java/com/sy/handler/UserHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/handler/UserHandler.java	(date 1599566886105)
+++ client/src/main/java/com/sy/handler/UserHandler.java	(date 1599566886105)
@@ -0,0 +1,61 @@
+package com.sy.handler;
+
+import com.sy.beans.User;
+import com.sy.feign.UserFeign;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequestMapping("/Userclient")
+public class UserHandler
+{
+    @Autowired
+    private UserFeign userFeign;
+
+    @GetMapping("/findAll/{index}/{limit}")
+    public List<User> findAll(@PathVariable("index") int index, @PathVariable("limit") int limit)
+    {
+        return userFeign.findAll(index,limit);
+    }
+    @GetMapping("count")
+    public int count()
+    {
+        return userFeign.count();
+    }
+
+    @GetMapping("/findById/{id}")
+    public User findById(@PathVariable("id") Long id)
+    {
+        User user01 =userFeign.findById(id);
+        user01.setPassword(null);
+        return user01;
+    }
+
+    @PostMapping("/updateById")
+    public boolean updateById(@RequestBody User user)
+    {
+        userFeign.updateById(user);
+        return true;
+    }
+
+    @PostMapping("/update")
+    public boolean update(@RequestBody User user)
+    {
+        return userFeign.update(user);
+    }
+
+    @DeleteMapping("/deleteById")
+    public boolean deleteById(Long id)
+    {
+//        System.out.println("------------------"+id);
+        return userFeign.deleteById(id);
+    }
+
+    @PostMapping("/save")
+    public boolean save(@RequestBody User user)
+    {
+        return userFeign.save(user);
+    }
+}
Index: client/src/main/java/com/sy/beans/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/beans/User.java	(date 1599061874872)
+++ client/src/main/java/com/sy/beans/User.java	(date 1599061874872)
@@ -0,0 +1,112 @@
+package com.sy.beans;
+
+import org.springframework.format.annotation.DateTimeFormat;
+
+import java.util.Date;
+
+public class User
+{
+    private Long id;
+    private String username;
+    private String password;
+    private String nickname;
+    private String gender;
+    private String telephone;
+    @DateTimeFormat(pattern="yyyy-MM-dd")
+    private Date registerdate;
+    private String address;
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public User(Long id, String username, String password, String nickname,
+                String gender, String telephone, Date registerdate, String address) {
+        this.id = id;
+        this.username = username;
+        this.password = password;
+        this.nickname = nickname;
+        this.gender = gender;
+        this.telephone = telephone;
+        this.registerdate = registerdate;
+        this.address = address;
+    }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                ", password='" + password + '\'' +
+                ", nickname='" + nickname + '\'' +
+                ", gender='" + gender + '\'' +
+                ", telephone='" + telephone + '\'' +
+                ", registerdate=" + registerdate +
+                ", address='" + address + '\'' +
+                '}';
+    }
+
+    public User() {
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getNickname() {
+        return nickname;
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+    }
+
+    public String getGender() {
+        return gender;
+    }
+
+    public void setGender(String gender) {
+        this.gender = gender;
+    }
+
+    public String getTelephone() {
+        return telephone;
+    }
+
+    public void setTelephone(String telephone) {
+        this.telephone = telephone;
+    }
+
+    public Date getRegisterdate() {
+        return registerdate;
+    }
+
+    public void setRegisterdate(Date registerdate) {
+        this.registerdate = registerdate;
+    }
+
+}
Index: client/src/main/java/com/sy/handler/MenuHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/handler/MenuHandler.java	(date 1599203387240)
+++ client/src/main/java/com/sy/handler/MenuHandler.java	(date 1599203387240)
@@ -0,0 +1,64 @@
+package com.sy.handler;
+
+import com.sy.beans.Menu;
+import com.sy.feign.MenuFeign;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequestMapping("/Menuclient")
+public class MenuHandler
+{
+    @Autowired
+    private MenuFeign menuFeign;
+
+    @GetMapping("/findAll/{index}/{limit}")
+    public List<Menu> findAll(@PathVariable("index") int index, @PathVariable("limit") int limit)
+    {
+        return menuFeign.findAll(index,limit);
+    }
+    @GetMapping("count")
+    public int count()
+    {
+        return menuFeign.count();
+    }
+
+    @GetMapping("/findById/{id}")
+    public Menu findById(@PathVariable("id") Long id)
+    {
+        System.out.println("------------------" +id);
+        return menuFeign.findById(id);
+    }
+
+    @PostMapping("/update")
+    public boolean update(@RequestBody Menu menu)
+    {
+        return menuFeign.update(menu);
+    }
+    @DeleteMapping("/deleteById")
+    public boolean deleteById(Long id)
+    {
+        System.out.println("------------------"+id);
+        return menuFeign.deleteById(id);
+    }
+
+    @PostMapping("/save")
+    public boolean save(@RequestBody Menu menu)
+    {
+        return menuFeign.save(menu);
+    }
+
+    @GetMapping("/countByTid/{typeId}")
+    public int countByTid(@PathVariable("typeId") Long typeId)
+    {
+        return menuFeign.countByTid(typeId);
+    }
+
+    @GetMapping("/findByTid/{index}/{limit}/{typeId}")
+    public List<Menu> findByTid(@PathVariable("index") int index,@PathVariable("limit") int limit,@PathVariable("typeId") Long typeId)
+    {
+        return  menuFeign.findByTid(index,limit,typeId);
+    }
+}
Index: client/src/main/java/com/sy/feign/UserFeign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/feign/UserFeign.java	(date 1599566886121)
+++ client/src/main/java/com/sy/feign/UserFeign.java	(date 1599566886121)
@@ -0,0 +1,36 @@
+package com.sy.feign;
+
+import com.sy.beans.User;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+//,fallback = UserFeignError.class
+@FeignClient(value = "user")
+public interface UserFeign
+{
+    @GetMapping("/user/findAll/{index}/{limit}")
+    public List<User> findAll(@PathVariable("index") int index, @PathVariable("limit") int limit);
+
+
+    @GetMapping("/user/count")
+    public int count();
+
+    @GetMapping("/user/findById/{id}")
+    public User findById(@PathVariable("id") Long id);
+
+    @PostMapping("/user/update")
+    public boolean update(@RequestBody User user);
+
+
+    @DeleteMapping("/user/deleteById/{id}")
+    public boolean deleteById(@PathVariable("id") Long id);
+
+    @PostMapping("/user/save")
+    public boolean save(@RequestBody User user);
+
+    @PostMapping("/user/updateById")
+    public void updateById(@RequestBody User user);
+
+}
Index: client/src/main/java/com/sy/feign/MenuFeign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/feign/MenuFeign.java	(date 1599203387234)
+++ client/src/main/java/com/sy/feign/MenuFeign.java	(date 1599203387234)
@@ -0,0 +1,36 @@
+package com.sy.feign;
+
+import com.sy.beans.Menu;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+
+@FeignClient(value = "menu",fallback = MenuFeignError.class )
+public interface MenuFeign
+{
+    @GetMapping("/menu/findAll/{index}/{limit}")
+    public List<Menu> findAll(@PathVariable("index") int index, @PathVariable("limit") int limit);
+
+    @GetMapping("/menu/count")
+    public int count();
+
+    @GetMapping("/menu/findById/{id}")
+    public Menu findById(@PathVariable("id") Long id);
+
+    @PostMapping("/menu/update")
+    public boolean update(@RequestBody Menu menu);
+
+    @DeleteMapping("/menu/deleteById/{id}")
+    public boolean deleteById(@PathVariable("id") Long id);
+
+    @PostMapping("/menu/save")
+    public boolean save(@RequestBody Menu menu);
+
+    @GetMapping("/menu/countByTid/{typeId}")
+    public int countByTid(@PathVariable("typeId") Long typeId);
+
+    @GetMapping("/menu/findByTid/{index}/{limit}/{typeId}")
+    public List<Menu> findByTid(@PathVariable("index") int index,@PathVariable("limit") int limit,@PathVariable("typeId") Long typeId);
+}
Index: client/src/main/java/com/sy/ClientApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/java/com/sy/ClientApplication.java	(date 1598801007911)
+++ client/src/main/java/com/sy/ClientApplication.java	(date 1598801007911)
@@ -0,0 +1,15 @@
+package com.sy;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.openfeign.EnableFeignClients;
+
+@SpringBootApplication
+@EnableFeignClients
+public class ClientApplication
+{
+    public static void main(String[] args)
+    {
+        SpringApplication.run(ClientApplication.class,args);
+    }
+}
Index: user/src/main/resources/mapping/UserRepository.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/src/main/resources/mapping/UserRepository.xml	(date 1599558716854)
+++ user/src/main/resources/mapping/UserRepository.xml	(date 1599558716854)
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper
+        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace = "com.sy.repository.UserRepository">
+
+    <select id="findAll" resultType="User">
+        select *
+        from t_user limit #{param1},#{param2};
+    </select>
+    <select id="count" resultType="int">
+		select count(id) from t_user;
+	</select>
+    <select id="findById" parameterType="java.lang.Long" resultType="User">
+        select *
+        from t_user
+        where id = #{id};
+    </select>
+    <insert id="save" parameterType="User">
+        insert into t_user(username,password,nickname,gender,telephone,registerdate,address)
+        values (#{username},#{password},#{nickname},#{gender},#{telephone},#{registerdate},#{address});
+    </insert>
+    <update id="update" parameterType="User">
+        update t_user
+        <set>
+            <if test="nickname!=null and nickname!=''">
+                ,nickname = #{nickname}
+            </if>
+            <if test="gender!=null and gender!=''">
+                ,gender = #{gender}
+            </if>
+            <if test="telephone!=null and telephone!=''">
+                ,telephone = #{telephone}
+            </if>
+            <if test="address!=null and address!=''">
+                ,address = #{address}
+            </if>
+        </set>
+        <where>
+            id = #{id};
+        </where>
+    </update>
+    <update id="updateById" parameterType="User">
+        update t_user
+        <set>
+            <if test="password!=null and password!=''">
+                ,password = #{password}
+            </if>
+        </set>
+        <where>
+            id = #{id};
+        </where>
+    </update>
+    <delete id="deleteById" parameterType="java.lang.Long">
+        delete from t_user
+        where id = #{id};
+    </delete>
+</mapper>
\ No newline at end of file
Index: client/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/main/resources/bootstrap.yml	(date 1598960448272)
+++ client/src/main/resources/bootstrap.yml	(date 1598960448272)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: client
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
Index: config/client-dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/client-dev.yml	(date 1599834790716)
+++ config/client-dev.yml	(date 1599834790716)
@@ -0,0 +1,12 @@
+server:
+  port: 8035
+spring:
+  application:
+    name: client
+eureka:
+  client:
+    service-url:
+      defaultZone: http://localhost:8761/eureka/
+feign:
+  hystrix:
+    enabled: true
\ No newline at end of file
Index: user/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/src/main/resources/bootstrap.yml	(date 1598956637078)
+++ user/src/main/resources/bootstrap.yml	(date 1598956637078)
@@ -0,0 +1,11 @@
+spring:
+  profiles:
+    active: dev
+  application:
+    name: user
+  cloud:
+    config:
+      uri: http://localhost:8762
+      label: master
+      profile: dev
+      fail-fast: true
\ No newline at end of file
Index: user/src/main/java/com/sy/handler/UserHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user/src/main/java/com/sy/handler/UserHandler.java	(date 1599558716875)
+++ user/src/main/java/com/sy/handler/UserHandler.java	(date 1599558716875)
@@ -0,0 +1,72 @@
+package com.sy.handler;
+
+import com.sy.beans.User;
+import com.sy.repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequestMapping("/user")
+public class UserHandler
+{
+    @Autowired
+    private UserRepository userRepository;
+
+    @Value("${server.port}")
+    private String port;
+
+    @GetMapping("/index")
+    public String index()
+    {
+        return this.port;
+    }
+
+    @GetMapping("/findAll/{index}/{limit}")
+    public List<User> findAll(@PathVariable("index") int index, @PathVariable("limit") int limit)
+    {
+        index = (index-1)*limit;
+        return  userRepository.findAll(index,limit);
+    }
+
+    @GetMapping("/count")
+    public int count()
+    {
+        return userRepository.count();
+    }
+
+    @GetMapping("/findById/{id}")
+    public User findById(@PathVariable("id") Long id)
+    {
+        return userRepository.findById(id);
+    }
+
+    @PostMapping("/update")
+    public boolean update(@RequestBody User user)
+    {
+        userRepository.update(user);
+        return true;
+    }
+
+    @DeleteMapping("/deleteById/{id}")
+    public boolean deleteById(@PathVariable("id") Long id)
+    {
+        System.out.println("--------------------------"+id);
+        userRepository.deleteById(id);
+        return true;
+    }
+    @PostMapping("/save")
+    public boolean save(@RequestBody User user)
+    {
+        userRepository.save(user);
+        return true;
+    }
+
+    @PostMapping("/updateById")
+    public void updateById(@RequestBody User user)
+    {
+        userRepository.updateById(user);
+    }
+}
diff --git order/target/classes/com/sy/handler/OrderHandler.class order/target/classes/com/sy/handler/OrderHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..f48d7dde6fb9a0cd217241eb3e451a9d690d89cb
GIT binary patch
literal 3157
zc$~FWX;a%)6g|(_7;J@o2?Y{DXfRvUBqSt2N!a7oECoW-hBlS0hf!)IBFRuDlYi6?
z?Mx<Z`k_CdKdRIFo{S`8vwi4z?6>IL<=lIZ_0PY5{S9Cey9q>46Gv1*47ChRZ?r>A
zEof$5UCX}VIhUb!+As}whM^`kv|W!n)W?xfkc7g}owN2;=UCm-OufKub<Nhf{oFe+
zG+N@g!4E9Qa4q|o;dZ8EVEdPzO#qroq5+L@G%09C3&X7oEg0%|4O5>xeqrbg1F3X6
z6R^lwW`1hOyC}LwLCqMBJC#5i+T-X@(245|Ey3e?t-wuPqwJG;?xs!0)yy1c=tzZ~
zoS>wm&lGf{hapY|TgE<tTgt!-n#&1z12^O7Q*aCYgebAfa?Nx+Lgc{Vt^hN%rcT=r
zZHu}LDEJ(A7^04LNU+XSrqWLdno=-?VTOdx3*6;%$7wzA8!C+ik180$T>|H<qUn|@
zSp}RH;4c*16P-zVRo`?eKXLy+!MM0@2;Hxl^3fv&6T-hz^6%R`QD_K>P@;ICYbRND
zZ4ihGxotQ`w!mji(;~cKnGVC_jAiFl=fF11{I0F-^CQdtxkP_g%gOoBd;@j1=vqgH
z&GjiN+PtMx(Hb*`$ybZ}S#ED><er+5v2t2rTeA&uE?q|5J%i%)X3iOLavCG9{1*n6
zrhUQKH%KuxMNz({)77J^74Gg?`no0(cezde>o<+Oskud)LQY;{bf>Fze1?3FS1rsD
z&#GBUF<g^n?yhJD2Zl^3cBmDK6uVFLHKe|ioZhSNBp+Id&wGac^0xRa%KG!@(rK(~
z?%qkwMIx3bg0^Y|8R~MrFx#pLks78;=`@{I4#UIC=VUqI+Nhq)E^oiV-xj&!&RO~~
z*+;|}OkCP{K?*ep-=qf8rJjfuG^>F?Pudc5TuFRD4e743hZ05bLA6|-XCvFyuv&xr
zq#71$V$&+xIlg2F(KLtEaaT0rEX7u@p5xA2rfXXTPh3|qm4y$ASF6f-qJP^udcy(K
z4e`pNb&5{4v`*7nPist`zNC{%E2A|w{0G?Yw25G*1P1+AJ*8j81K=5ErBixE(McG;
zMwC84Yj;%d*_$5zfOvP$*e6_z;y2$_LgvyzE<2^WVb7%GPVD9|FGI9qfp!tOTf`D-
zuuS`FH3R@X0$l>nrQ@`u)Ierm(f8|DU=A`^p}YPXx>yyL4%zwJg<!i#3%yY&4Z-0p
zc@qhB{fX9<(U0g_9U1$GUcqJL6K+Qk6s3b`1HA;lK~=m-;rno%svWTE@>z9Z4eJyr
zigtX14f0TrCTwD>#45%J0H4JRpT)Lh5f@$gR+f86`WC5*+KB2TOUVs}lk>`aht@%v
zP=^Qg6H4MGm6V+Xe;Eq?oge)BAo!{bPH)Ik@TaGOk3{h6sc{)SBk*E4@M0)%(7RVM
zu)@l_bnn7RQ!6L!K4tUZ3X`@|ZPIqmowOe=IcYnzj9<v%ekF$|#9{LP<?!PbI82;5
z1rIBy;Mo~duoIqwovKstx?&1M^hsZ<rv>o1QUFV|E}xNsr^s{F_fxt0BGBY-Rzh27
Km!nnp;ru@x!<yp&

diff --git account/target/classes/com/sy/handler/AccountHandler.class account/target/classes/com/sy/handler/AccountHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..c23c24334ebfe2946a2a8738580c513f85e7977f
GIT binary patch
literal 1979
zc$}S-TTc@~6vzKlF6FXZ1O!nKD2fG?^}<a+v5<I4iV{>_e42I#7;Jay?iNCf-$@e_
zqYr)nKa}yzw6xu_6*Qad?3_L4{LU@s*Y6)c0jyx712Htk(QKgwtqi?~{D|8*?(W;K
zGKV4?Ftn~oR|bz6nv&DI?Px=L932)qVKIzmRo?bb>;vvPIpNu<Y*rQB;CboF&|UO}
zw<8M5mx1z57!v8Sg;x>UZ$mn(o#;kS9K9AUp^stwJOhSKO(~-plF3s>MsU|R+N;wM
zGM&qSh07RZ=;2OYy0uOxBO*<Ol_=CJ7>?trg=-jLm^jyh!7`vqurqbR8vXicOF|91
zZea}L3|)KDbv91Sj~5QZR5D#{Tw1yNja?)xOyUM*Tr4;|5H(JQqGQ=*7~Y{^WnSz`
zUuJS5<+>{1fmE)~u$)%jzU>!0>F)1&JTH!w_rC05k7rF4c*Vd@6$5oFJ>je}G;b<L
zP$X&TikHQFMtE;Hxo7B0t1Qp$a!=}eS=byLNaBs9|2lKptsV!4{)m>-fNzQ5Ksno7
zhZ+cvJT63La4a%*hN@f}{I>FgEnX;)BDrcg;<+LPX4#?nON5J6A%&`TapsQrP!xW!
zp_~)VG~>fC5Y;N03p+esF-d*xt)C5s`3vKpiJFZ2?a<uWAEon&Ve#Vi<H5mcS9LG!
zGc(xnS{1#lcq(<r`@^lB(`hssxaiXP!KQKpPvuIJ@h_&P>ebZSY+ecm6SOvBv^-<<
z(Cz@kO}e$xIc21@80%y$bhen=ExOrsGA*6?2KL36B+JSm(`oZI3YftxolGx6G#le}
zg9SQgz9K&R9bGYeu5&SHTnv`f$}aTRZQP;%bJ{VZ3rvXJB+>!heFx^_9`2JYuH$=P
zz_ivP!2JXsItw0Y0G`J}6+9maUaSYxmTLeWJqu1W054&=3SO!KKdgXP4A|1(RW0;M
skLd+jrf=5KCt|3!ti$|D(mDPAsjr1okKvJdKQ^j;^tDdslZtxk4<;VjWdHyG

diff --git client/target/classes/com/sy/handler/AccountHandler.class client/target/classes/com/sy/handler/AccountHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..42d6197d2a065b6ab4957e2abe37ede183985e4a
GIT binary patch
literal 2841
zc$}40SyLNF5dKC8B&6jM7>o(VSFnVEg#;5o1R^kp9f1jFZ0A~O2WdgtRd!dVRH^)<
zJdmoC9Vb<J%!B_y{!1#Ap4Cd|SZw?t%}h@pUw_@b^Y*_#{sOQ7Jp><G0`N;{MH@r+
ziSkmBbBdmkpQcWD+Gc25)O5{WVrYrR4%-n#djKH`VMq+aX(KONB{{3;YL1(7BAqsh
zy1iLGGDu2Uu+FuN&M=g8^^e85qU~J9!{|g;0NoOL5Mda+RFffGw7BVt7^2aN*A!QD
zOFp2>c+5i<Kp#VolVH)-a`L8PWw(?<2)$?tVt~P?sUZyFMgT(+KEg0*H+f-b&2am%
z$`Fahk{4_x4Lw6SjNn!Pw<X-cU51W}SQLi{EEEavTr}B8a=cj*YZe9ZF@s-M@?4<2
zFCmH;kwI{_we+cwGxXJg+OtiKU<L7jp<OB3S;N%qQV<j5M{pQ|jHv*oC47QU8Lqk6
z3dEND<Y@muY#4$RV&6FBMEzYCd?l&4M>tW*hZ1J-nP>ntuj$oVjWyINA#NLsRThRY
zFDkJ>L^t1x%S8#FR|pW55d;LWOa*dc3KR(mD_EsM9BaC|QgTd1=|-cCmGgukT&zi0
z#|A@Jv7jn8uW>Tqoy#Hh?k**(<@upzX{j7f=(=Gmwr1$W<y_J*GqP0>OdXp9`OGj+
zT@S}f+BVFRtW*u;MA0_RG?S}wD%q-`Qi;2gn$EY2`4l(z6>?7mC5^O_J5)?foL!;c
z&T15IB>Bz}CAasz=clQx3<1$IPA7LYbODiWmm4JFW!UQxfj%t4-PANge?9(Ep_0SH
z`Y?;lzMH3Hi9C1g*-HA9EL=a`Tbz1d-BASLHa9Kd+N%y{JSC^7S87YJV^}u1DwI=c
zeW~P%<WiFBK0<fuOJ0psSNp5S+~q$Oxn-{yYAN3Qg{w@B2h)9Cnp8PwBm~zTa{WYh
zH%<b>%#~qo@ET@%<+>@8f6~;S8D_7}vtnl}JrKWiyq*(exoH+ddq&Yr^L0&BySKi@
zCq;sn4W2jomc44|wrS+b6Y?RZPTej@>8#9KI;U~n#%+2(ef09uV<TQrS~uy`M(bl*
zTWM`|PEY70)5?T&>^0c0wDI9fR~hI+lK!Q#0=BU2IPJkx_#NYa&_Z%xW9&Bs9=t(^
z4_o7ZWByO{K6{O8+Y^!g@mIM11~*%9G!eN+htbMmEHdtHf5+s4f6#x<&dHVE2|tQ<
z`X3<l*9pW8+700zy_VA$#v*Rg2X_Q(^!^EWGX!A(li0ym1ZRbQyVxT?1j~gib`#hq
z=wY%xpq&qgZenH2BeMFMBtfu$u@<10@0m!Mkr^EFI!X08{a(BPv+xbRC0Rf)_nkw@
zEWW>lk{M4*=4vU4Ur@62K1yPg!WdC9PQWLKl1ZXOrlh7Q@oA!D<^w2M#t$wf3hmxU
z$$W*9Wlu^{jg-)v=u)ywzC}BRT}r<2;k=>I;tuTovRV~ln4qNT-VHoZ6IiVV=1yQq
z1U?o*i}V;hrx`c;BR9I_Mt|gk|Ceg`kaL%yb)^P^RD~e9EWI=LY<=!NXwLtMqZ*;z
KDXqDxdj5a$ps-#5

diff --git zuul/target/classes/com/sy/ZuulApplication.class zuul/target/classes/com/sy/ZuulApplication.class
new file mode 100644
index 0000000000000000000000000000000000000000..2de6c8467eb6c588d03761b6d3e9428e3e4aa0f9
GIT binary patch
literal 2207
zc$}40>r&fB6#f<rHm(Z9Tmns#=GIg;4kBrrCNV=}j1!Uy?8e3^q_?%bHljjeBsq{i
zRr|*<Wu_0%hv=hpdUkEV0YN6x%-P%dzH`~LyZ`+6*WUmhV=In6^hXiVFn~dZ(JlUl
z8#Z^EMxnYTY5~LGyyaNI0z<!^tV9uGn5?<mhX2;sXtnI@&W>%>cwo6s9C3UUg{I+S
z3^Sx$uW9%@p5-(f9^V$buJ@Z!b=|-ysmUHBaeFP2Roy(XpR>8|XI}Trlmdy%B+W49
zn(G8&FEDbh)3BN?k5_HcV<OjC&O|ZFaJd^m!?FY68AVS#RlPVyWHQDW=EF?viYl4$
zd}GbC7r8I$IT{?>lU7P@%d3ev5|U<;VfI3rGw?Vj&>zP%K8fOrhEH*o;nGR`i>_-6
zPI-#H;dV<D8nhMqM$$Z^k&#57X}FFX3}e0svbOE+<~&gsPGE7{m%tEMvJ%5B29}ce
z&o$h^7gQ3wURQWgFL+kdBKs41$gWf*D5)WJ3bZVEU3f91$?rn3{JgMQlA5y`j8mE`
zBG`26G2CN_Ea$UJF?>mt@ho4C;cMy?*QoOitrZI;>OG>;T*{mIaz2I(!$2`x&Mgl>
zeZ!-1e2XVhWMvi?8HP{%HC?AkS<zqgCQeSOtSxEC<0-=sWo?D;Wt&3kp4OC!S|*o_
zR7!643k~1FWSI6u)AFg1&g?8hJ|t(Mg?xT_WaRl<Wk{X}>(;Xb9u@Qoit=cG&+th9
zKy#g9CZm+{oLi?vjF^@qR$JRu;g#k2Vn~>7joTIOS#sQ+j0Bq&mDrRSeoxS5MYg%D
zqe(sNcuRZSYZAj)$TC$-r%sAo#y~-m;?T~~5oWleC(U!tH-V>Lw&)0Ki;Cr2@`i96
zH&9*?%iRkv7JjU1EXu>e5U(94n!tMay%f4H1RnHNdKnfj-j?^=HIk{OrWxiww4Nx0
z4hwljo{XQ`s9BkOhKJ#4vE5ePa756stv%y+LK=BT?!P1{dhXs^qJI(!RgVB~1#YeD
zjp#zNH21EDxPd6WQ1Xj_$v2AROBxx}GHM4>`(S@krw=8PgKBaZWs+J)0c)sGJA_yG
zfwUy}0kv{1mWZYfF!bsKA6Lc_WOS^DBZhTsQ2Sc)F&coTf5cB+y8B0ThZtGk$E80`
zxij?+RmYv5yQ{w_u3y2sT>qk<eqi$u3E~<z4>3XQ<&|{g08?#TODAr&aa&0}otSCk
zZaOii<b5T-Qu2Y450!i@<v8XKu+T<sCh;uY#`8n0tk3MDaN_F%J$}Gd^6(l)>FJol
zP3qmI|Bk%VF$bLzm&81c7BPcmq_K)wO6nX%aZkl~z2kc~#u&v_MUCPcC9OIHS?Z0u
Q4-F-oYF4IxlUfV-AFmQfNB{r;

diff --git zuul/target/classes/com/sy/filter/PreFilter.class zuul/target/classes/com/sy/filter/PreFilter.class
new file mode 100644
index 0000000000000000000000000000000000000000..ce445ffb26849447eb9e2b42cf86658ca01ff911
GIT binary patch
literal 2777
zc$}41-BuG<6#h;Um=H#hsI_RdC?E*|M=foYs1*?k8c+$K#r_>82N;;l#F;Y)_Q&=S
zde=TdZ@jR*pz1}}>Q%e?E`5Z$y3b^Y7@|d3>-_Aq_degZ_da{__w#4J0~o^hDZ~)h
zkkHYDW`-lCTQ(da7j0|Zcn}1(F;ByoWlP~PG+(eBOI~7#XR>oiBxzCcL<%XiYS4A;
z!Cr>m9WG4Qkz!pM)8bwrd^u9xGPExVITCoDa9+rAnQUQ~4)W^aeLC8aW=N5*=$Ii(
zPFDCDUpIW=t=U2v%TiX1aT<zML8O{*!2ul9@Rp84c$;CLvNCM$EE&ZOUy3p@bOZ8u
zF!X0wu5r_|99fi};N^TP4&#W1cXS-ZF@~O9-N~@$1=iW=35Ej^+~{ISH!S7Tl%Gx=
z$8mz;P?@g^Vr_DH+mg$)@+Ehq&u}uc)3SlH6uQx);iQgUWEl20Aj6<l)XsK@Z6mLg
z@IHp)hG|=rFk{#>-N2F2E+Ep8B!zwqXgH<A!0DGm8hWBKBJSMw>+ZR+up&&E&(0@t
zmf=L>dw8jAIgu!dK?=>5-Yg-AmOft-Nqj(o9uDNP>sb%Dv|LAJ>zt1BDxxivf^or1
z!b^jpGldJdsNs^1k8qiAsS5Nrj6hnpZ(O@QGpiN^d`)=P;s(R{hGAD$oNhdAtlXCd
z#Zq{S+!VfXRhVu`l*mz7vsZMC;3}oT7qTdvl6qp(!mm(T1w$e;pPf@`V>&*@IHB=X
zxm1sflFPs!A#X}?B0JZLYq+kVpkoqK3|+gxz@QWR(e;Yu34fUCF}+oPim!2%OF`8a
z!%bCvw-~xJ^`{LgOhb{95yfpW>=#sBVykl`s*u|XmLsNu@`CVY_<~K6bip;bJ;yyu
z?IU4AE?X4tj>0Sa<>|dwWiuNU(r>M9Zg?ei7d0n(RJy<H26kx+014+A_Ih<KX!p&A
z-iNpKfO~h@U8n*nVdm;2uSCq^Uf|R}_^9xSQ)yd{dUjP#3{BEq6^;tzj+~Ik(REW)
zRPp;7Rv9uo*orNMu+i7l$+YMOo~Z&(u=mzNe@fj#ulkDXN?&@sGAZbZmHf75R8qJH
zPlK=OhN9H{0+8jb5y}WxwULc+Q@S3#r60GyrAV>rbeuaSTln1t*If-N`JDt`WvHs6
zf%@GB-DanY5pLT>i>f?{HHLwUZ}7*GSf@|e8yP%cIQm)@D&+~s5#ET+eP2)>zlpvy
z{~Iw44;hZVUX_|!Rhe=&O^;svHBn2XUjsDG(9WQlDQVwtV875JhFKb$Lt!iCXw<6;
zxQ#nBGkk($k?}xe98YVH>rC6XnZ|3T^SB$C_D80%#G^XPL)$E4HOo)&S!DT#`b|S~
z;R#v_xlOc9{)+wmPtn2f4DSM)=t^g+`%UD2LR0)v`b^#ay_fePhIojfk6JT*nvtN0
zwV;bWD&5H7B*`;4N8=E37$@S_a3;jrS;Z3JOwifq_=1qO&`01)aKgGk@;!+Ei#`o0
z4Tsy>=-5Pwjuf4LXl|l;zDB1%{r*#Y7{e6t8hA!GDoO)SkpC0uTznJ5xpwx$CPsfo
zuaXWWNUtOD6cZ`{H$v@PB2>d)q{bfC$epFI0(pXYfdF1Y8kZ@T!|1^%Q5(Y`uG4h|
z`k%rra&?DBMRJf34w0t7BH0qw8r``X-CGgeG=*RZ%XFh6-iFw73|5J2=<k9RnlY@9
hf*oeK42R|ew0B7!gya2i+`w0KlA_hu_!i%x<3ID2#NPk_

diff --git client/target/classes/com/sy/utils/JWTUtils.class client/target/classes/com/sy/utils/JWTUtils.class
new file mode 100644
index 0000000000000000000000000000000000000000..031255b059cc757594753faa5ed5d1121415865c
GIT binary patch
literal 3126
zc$}S9TUQfT6#fnb2Erf_5fv{*1q~35wQ5zYEyN440d0fOtL@2T2m{Fs%uGOf(cZ7W
zz_t3`SA9v*hpzUutG}tM-<bp@CPJ1EGv~H1-~P_td*+}2p8N^mB7O~{3C$WpI$F>w
z5Lu8bGM<-qE`Bq!U>d$a>m|#!{L2E((V>|z+R&~ctfK?EKzATs^sRh6A@io4m99WX
z&h(SE=S$l#1$v`HsamN~WoU<vE<|WpX0rk<(PUCN=*BJ$Jvw%yS74{%6ymbz&!37f
ztordAv(p4*xTf@JdVr>D&J*g;aR<hWRz7RGquq>iua14_qoy<rbBQq}qT4HOhCNrb
z4c~I?__&pDY_C}0c?S;QpoT*_UO~S==QHU^xg?;?Iqp?y%nKZeZeyuT>k%DCF+fGq
zH*FOdUw0LCR~R#CJBH&LqB@2!EYQDQ6vVY^`SVxrE?KVWjWP5y(dTV8K%$12z-}ex
ztp%E%lDe%XZ8%A!hnKy(%d1Ddte2g;<9XRtGmKMsRl{i=ui*?ysP-ZAImacif)^j#
zm@@Q<$+5)gv*!fPS5O9-nD$-E&eh<oXCol!oQ~IVULfRIIXke`fZ|ZCLzRmcb&TQ?
zp}FRAksJz4HfXL|$g+LYos)*?#b->{nzIb4(tufX8E<NMOUD?-1qK_^VzFe@%?KQ<
zR{~{GQx(}2T-9(*$8}5y?0cakOJhY%*90y!!2BjyS4_jnnpxUnlH3s3@k}}8*g16_
zDIJrT5@=VMn8-_uH+`*+msGWCV|jV2s%MogDW~r$r)hzStsT7}z&fs&PU+;-b>@1l
zI;%_-GdrF?BlATjNhm>91iDg|ZB7*n8PlDXnY^m$lw-*JjC3uvu55<<dCL>nld4-`
zG~cFrg0pDy=8tZ!Uv`>$iOZH+P(7&YIZ+z2Y)|?@WA3TfmYL|8jm~kT5mH+GGOXU}
zxYm|7Vmn)n;nJ4ZQU2zPUZ&y5r0LH)*;~?;1(WGUe%jNlXXzJJ6(*xEWw$O_gAJuO
zKSp_3$YkZf#$^ng3UF-8QX|lYW(33{pOxwis~j`K(!Mkn8EJ*raM~%lhI!3Wi_VQ)
zIjJ;B-nirVp6|+~GK*eUD~e&PU{%9i9c%cE*Za(gWv?)vcq#~w8j`^?0Ct0p!sgY#
zn~SNURCX{S?QGuk22zf*SX|mV;wnXzDKB?ecDc3gQ0*yGJ)gGt*^A%{f#cCyuIpV6
z`MVd!2=41xL_UJApHtoPUiGAHn=U(_=b4^{?*#U~C}&uIm8{Y5BQvuhx;6YPaA<2$
zcKEU|4l|4<{uBxHVH&qN&T!R)69{q6zd*icxfACoIJOM`0r4mhd5`bbV6y}7^R1T!
z@Bu#L*p83zF`5JA-#CUio?M5P8flAYC3LQ1=j3qg3HAVwvA+qikrED<FxY)!9q|&*
zPMvs2jpo2hAN>Fk+So~7yZE2D8~f3Z7~w0=!)5EZgHJeyxc(H9Xu9|_mVrU6F+N#_
z*9`M1QYAmfF{e-qE`a$UFpJ>%iR4UyPjOTX^#sV)ap5uE5Ew2Yks5jUl!$O3bBzB8
z#{)>cWu3q&xZ6aF3v^p?mSs3$l{^)C?-5zEG7$S4$p?rGkHr2$vV^y1e@74ZZazR~
zuy?bBcV-_wWu}*WtG9-|bk;{!4qy<60to$Oiva@&W`*E_)y#%NNJ{}*O+67xE(f8w
e@GAWH-1{6~;wyYp3E&vM#rLG<2mFLzu<w7}PFKhP

diff --git client/target/classes/com/sy/handler/UserHandler.class client/target/classes/com/sy/handler/UserHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..227037f44f1a274649bc79e1307066b467d2d555
GIT binary patch
literal 2428
zc$}S8ZBrXn6n^fK5R$AkO#z`rOIs@mMYdJwi$N+cLQ|I(p)!ts+9Vg)y4l6uyCBo)
zKk|dlI6C;jAK;Jbc<#+6S;%H4I+^60d-vSudCp7j{`2myzX5!XS2<`H${?j9jbVnu
zYwN@^9Lqg4Ue;dox?mVywq0ASFbtK-`&o=2n?X)T9y-JIy4N&<Gvml|8xHr4Zv*Z>
zYxxY>kXD=AK6Du-%_#Cfu2r0RQpsZ!S28H*xQZgfL~<BI=D>CvtB%7kR;pIZrqUS-
z+c8W#5DI2Y$2cY!(seI%h0<G<`;$7RaGha9Lad!t8w__#W;apOa}O)!w!j*<+(0o`
za+t;k8GNYYCT19}_Czq`11@%~AUO4Wf*p^;?g`(P!243eZ5?;;5koFKZdii1R7{i-
zNL%qA>zGA}ir<Rw7yG@8ozrm-^Mu{t4sT;$>&;LFFX%8Na4N7)2zF|hN@X|sz8%;#
zhp)P>CoExmZou%^^!!63IF@M~_*Rosl0QcD2UcBp{+VHQ4j8MU@J?-?H!6g_?llPg
zifOz2McAxy|CL4X3`NtcTh6}a+j1Rkro@p=eA8zCX(G%tb&vndz^ddscGIR77q+=L
z@)|pqlqa}PDA_%l7fXab0hbd-WjUdaD+IronC&UA88sq~C%VPOwsm|gn@dVgEGHzY
zNh2Ci<Bih!)_9{dzGb+5vBn*-7mEFGVEP?P9JLEb0yLYtUAWwAIXRTs{RcD&2?;Zd
z8ts1r32u<eRHz1eX>c805UWGph)?$5D7*ZpkOyMTYn%~E#%Ry`qk$1N)YQk7#Qz6r
zqc!NcJumd@eAAW#SBOp4f~;J>VNX^Zh;`2uzUQ<C^S>Nb$;P!xC3VN<uD~t2TQ$0s
zsi*RGC3~M%!(<<j9U+@mt50cVkY!}kbAN*UMvjKhqF~U`MfIx!u!M&Sl<rqr$-~bv
zL?4Qn`yH7Z)8}|^2)|y!7*iNCt+)t7dXMlp;&?)yMz0VctI;-S1E?sNWu<(S0>7Z|
z$`4=xp5jZ|dtalCRk<0^nU4E}4Bg#yRO(xdlFLbb=eWl3%O!PFu?%yOx?ak0^62JA
zN}+xy-*jY)67}A>l(Id~{=kj-ZtkNh;wF`U1_f$Jw+6*d4T@O9Iw9wg!3MsHYLI5M
zog`vY<*l=BvTJ1SpcKj4AONl143c$AL#mr@PCc6?TT)^sTCuT)Y>@=kmar9*@T?=D
zsw8Bjgy(7$W;^UpBldj6epl<M^+Jp|-yzNqLj3h*VtP+eHIs<Ty~Im>h+E}PD7x7p
k-X_oJo8%|GT$TTy<co_*YIv!BcT{MRyl=?vcEb1m1zGO?RsaA1

diff --git account/target/classes/com/sy/beans/User.class account/target/classes/com/sy/beans/User.class
new file mode 100644
index 0000000000000000000000000000000000000000..ebe939efba67a86e802c8af869f68df7979991ad
GIT binary patch
literal 3419
zc%02u+fo}x5bXioS&Tt4ScHpkxC*cm9Fy1>5{!*aA~5FWI8IWvNP}1-?W%THPEo0R
zLtgWkPe`hwN|hh-0eQ+7rE+F=bz4TRJmev&8ck16ch8yAJ-vVa{q_$cx=*j-)I+^d
z3TYIk2&2J*RmnM*xl^v2PVU&@HlwIsEZW?07!BoL>u>a2SvO0$L)SLU(prLI6pvCu
zqdw9YU2hpYJAKUyE~Cf;!!+CtM!oY3C*rtk8V%5OMm<Im4s9Xx76J;3A&rs(O{@k0
zre5Jfc|)UNsjTXb^POcEh4Q9GX{j`g!bQXKJ&neMGE(AZk=sHwq0yvJ#a&+J)pN^~
zhEp2dqW2kTHZK{D%k84>@+PL5Ym{@3pjjINS2G&T(j23aihjYjEVH1yFAVn_lH=;8
z3wC~<58mY}UH`47h48Ay!c`Tc^g+#ZjS4?89OJaiH%-%Wb=SZh7_H_lyOeXP!t~4r
zmEiaycV^iY-OcGuOL^WAVr<JD1dUd87u=bQ5|{Wb@9r)ak=aCvyPJ*5NzE(qgtn|A
z2p`BBCf}=7PPu)g1DB{YtDu)pblVVXUm0@G4a7?3uM{alC7ib7Zp<qPIYDN3xqEIE
z_jPeUV20_B|F5h8WX!d^6{9dX+yR$E9rQ_**mS(j<dqwUD1C4}_MZ<{PR9y+`~EBP
z_S#n1+w&ijx7S+5vG+v2DacMs)}TLXJS;4oj^zM$4>}%L^ExdmVCDqP8W(F>iHju;
zt(sln+lDBKxVY49VTI&Av@F+gZN2Jc*%^q?UV@&{ew3bz*L%Qdy2X@XzOgR2PrUb_
zxAlT+*_VudYNymU^nyOs&0?85(|OCfs8!#c^$y3Q%c?5jukyi;+3|Ay5L<e=d}x4x
z7#%Sxi%WlR6xZ2OrqLnS=h)m*rqLR`Rih_*E3X-Pa<dD1%l7ssg8B_#Z2o|B?wBUG
zx5|jkohZFvH1n^>iPB3(6Yn-fllF{h3jH{SJ{!Y~&jX|$@ez>ous^5$dCZ?D{TWT1
z7|lcO!@Pizb!ZVAVQG+rVu_aVe;cbDW`;SO{f*c!(m#j)h*YNN1N>{A0ewg-m>J!n
zk6<O7H!$}I>+E8k*so3Rgw)=IPg+J8_N@E}LJG?h?uxj0x-x7Zt@>gA!W_rElKq{c
zB6NRtsZN90<vOLZ=}?_UvgvT0MziTioyN22Xq__IbgTnH79a@JglHVGCg>XINm2%Y
zrXby-8IZI{(||N1A%5+h*o3$uX=hRr#P>)^P~R&hL4HU|WAZve5($V%Nu(euC2`T1
zyy#R6AqD+{4?+L|kKjZwC!d6mn~B+nn>c<JiRs4}#7JR`V2omnV`N0q-r^P%%-lj-
z=4P9j>ysK0{Z2FOpg5SgySUk^GWDO(Jw@I02T#AJbiPk(s=Db99={HsjV^WLCB?6s
z0U7pzvX%#fm^PJ|*44E<7{v4#KHFU|CEIH`DZ_3kF{Of-c9fVtRbxs8G3~-<uM4K(
zc1*)E>}N_$BSB2hm6$fwm_~w_j^T6C1yi~mQ(A_7sKhiH#Pm{$X-kc1G>GXN_<Y+1
z(^xyEF&Xxe64Q7Pldi<{SdD2sh>64JtP7^ec1)8p>^417V9EqB8A?n~QD+KFnINVL
ne9SJGyl;w+Nwlk8`dqqyL3twCs&+9BQ2-(wLlJyQUs3uWniO>9

diff --git menu/target/classes/com/sy/handler/MenuHandler.class menu/target/classes/com/sy/handler/MenuHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..71761d3b365ef6dcac9f2f623f77eb7d25a56b3c
GIT binary patch
literal 3064
zc$}S9ZBrXn6n<`A2!w@3KuQa?l!6klTw7@i5<y=25*u0sjM}Q5O>%*)VK?q>zzoAb
z@`KJe)4>n^0DqL@xp$XMNOni+FyY*sz2`a4bM85N^Y=f0{srJOyiOyAcnS#(Npvw}
z-snd<uj=MLe^GiP$}U4!&M*yknIS%%E%u-rJt?F$^g?5}UbYUo)8GfXS*Z$}Zwj;i
z)LSzoYL-p$1BE8$j%yp{{*pxL*Kh?HhW<l}*%md+F<i@TFiaGDP&;rc+~%I8UJPI`
zg&_^^W0+z5zXBLidxlwAtyUR^rt|r%N2%@_RbDV0R{@S_xQ6Qt$+A^9T_ra!{bL$F
zzzv3O39;75R~V+ITQn6cQj|R>T@t$KsPqbST*EC)P!a33itY-A;pvc_*`nM#sbLBq
zGNdb_DqP{E8thD^HcxBFO5lW}9|`H0)$lRyP_&}I*4Q<|qm?GE;S=0t=<zhEy^~a!
zPFZb*Vz{<V@W!Di8jew_idECJT-`M+(_vUBSoS`5YVwfxZ2eFiTlP=B&^^7ZPDT#`
z_-fs?jtyH>2zLJ6LW_E}E+{N{Bp1|0lP8X_kAyuZo9>kAvTjw#f2ClU;(7hBB<x+C
z=*o7q%6he^+lKt^I}`4KLHx%G(furwQL)4?vW2ppJsl<CSd@5)0$bTX5$>j5t9fBv
z+=pd(N>Mcq4Qjs3rf?6e%9bv1TwxQro*iS~)ZMyGe6t}<oC|5JWx^lfe(&=WmFSe8
zs3cURiHm0$WV>*v4=ychOLq^>3#)|rlN6Kfm1*xSIy8PhQbetC8Z{g*>3rl%g4#Lc
zF~j}K6SSO`!l(H8P+lHkTl`!Xj=N@68cU($MPwgd8f`-jdXrIxH%H$uNs`L}r((K|
znvgGqA>JHte&Ts)-{K{vH>yK!^WZhm-Xkp;(mPh&E{n&89GFbYWX#DdQNtfzM8{pX
zOxL!m-eA2;sH%UnWJxYtgI==TbdiBRF?p?k;U0bKBKxWG(rxAYddbey=e~mnNYf&z
zwmqaroGc@ooOuiOyNX-zQGh-y(tpj{KsV<SS%w@wr(G9=|3K=uw&0PFU`eK*Jj;^I
zD=-Huw4w`*c1XZo#OV(h7)?~h4srzBH#&BP_u^=xr<Ld%l;x(%Fz!Y88RRO5FI3h6
ztkNomHCp$?$PID;>k4Wkgv=v6Cg0T<Ii7gs$~Bj(WazT=rO*4)(~{#Et}^`ErhlqM
ze>zhCQ(Dngi-ba5QHMzfCQ)b4Fd9R9S!WgOu(vG`-HSZFq~}s<lF^s2T+fs|jWspp
z$=pK0&%WVj*Zk}^V@Nbrd3C=__FfAGEuf%b6VICzHd`pX2q<hR3Mon9E7eR>*pA44
zJ0$x8*~N(Lkp<WZvhRi#ARAeLk3uLclU@1$1^BwX0Q3VU;_zo;9X<6Z;_!>D+KZuw
z|4oPXA{qKc<d5EKVv!&_*gAT5&M=qgn7wDjrl6S2cp(9k!C>|V{n?W%$u6$g^~HlJ
lEC!SKZ3x@%6x)e-<Rk_fVtA=gUMZ9TT76IUhXCove*p*8g}49!

diff --git user/target/classes/com/sy/beans/User.class user/target/classes/com/sy/beans/User.class
new file mode 100644
index 0000000000000000000000000000000000000000..ebe939efba67a86e802c8af869f68df7979991ad
GIT binary patch
literal 3419
zc%02u+fo}x5bXioS&Tt4ScHpkxC*cm9Fy1>5{!*aA~5FWI8IWvNP}1-?W%THPEo0R
zLtgWkPe`hwN|hh-0eQ+7rE+F=bz4TRJmev&8ck16ch8yAJ-vVa{q_$cx=*j-)I+^d
z3TYIk2&2J*RmnM*xl^v2PVU&@HlwIsEZW?07!BoL>u>a2SvO0$L)SLU(prLI6pvCu
zqdw9YU2hpYJAKUyE~Cf;!!+CtM!oY3C*rtk8V%5OMm<Im4s9Xx76J;3A&rs(O{@k0
zre5Jfc|)UNsjTXb^POcEh4Q9GX{j`g!bQXKJ&neMGE(AZk=sHwq0yvJ#a&+J)pN^~
zhEp2dqW2kTHZK{D%k84>@+PL5Ym{@3pjjINS2G&T(j23aihjYjEVH1yFAVn_lH=;8
z3wC~<58mY}UH`47h48Ay!c`Tc^g+#ZjS4?89OJaiH%-%Wb=SZh7_H_lyOeXP!t~4r
zmEiaycV^iY-OcGuOL^WAVr<JD1dUd87u=bQ5|{Wb@9r)ak=aCvyPJ*5NzE(qgtn|A
z2p`BBCf}=7PPu)g1DB{YtDu)pblVVXUm0@G4a7?3uM{alC7ib7Zp<qPIYDN3xqEIE
z_jPeUV20_B|F5h8WX!d^6{9dX+yR$E9rQ_**mS(j<dqwUD1C4}_MZ<{PR9y+`~EBP
z_S#n1+w&ijx7S+5vG+v2DacMs)}TLXJS;4oj^zM$4>}%L^ExdmVCDqP8W(F>iHju;
zt(sln+lDBKxVY49VTI&Av@F+gZN2Jc*%^q?UV@&{ew3bz*L%Qdy2X@XzOgR2PrUb_
zxAlT+*_VudYNymU^nyOs&0?85(|OCfs8!#c^$y3Q%c?5jukyi;+3|Ay5L<e=d}x4x
z7#%Sxi%WlR6xZ2OrqLnS=h)m*rqLR`Rih_*E3X-Pa<dD1%l7ssg8B_#Z2o|B?wBUG
zx5|jkohZFvH1n^>iPB3(6Yn-fllF{h3jH{SJ{!Y~&jX|$@ez>ous^5$dCZ?D{TWT1
z7|lcO!@Pizb!ZVAVQG+rVu_aVe;cbDW`;SO{f*c!(m#j)h*YNN1N>{A0ewg-m>J!n
zk6<O7H!$}I>+E8k*so3Rgw)=IPg+J8_N@E}LJG?h?uxj0x-x7Zt@>gA!W_rElKq{c
zB6NRtsZN90<vOLZ=}?_UvgvT0MziTioyN22Xq__IbgTnH79a@JglHVGCg>XINm2%Y
zrXby-8IZI{(||N1A%5+h*o3$uX=hRr#P>)^P~R&hL4HU|WAZve5($V%Nu(euC2`T1
zyy#R6AqD+{4?+L|kKjZwC!d6mn~B+nn>c<JiRs4}#7JR`V2omnV`N0q-r^P%%-lj-
z=4P9j>ysK0{Z2FOpg5SgySUk^GWDO(Jw@I02T#AJbiPk(s=Db99={HsjV^WLCB?6s
z0U7pzvX%#fm^PJ|*44E<7{v4#KHFU|CEIH`DZ_3kF{Of-c9fVtRbxs8G3~-<uM4K(
zc1*)E>}N_$BSB2hm6$fwm_~w_j^T6C1yi~mQ(A_7sKhiH#Pm{$X-kc1G>GXN_<Y+1
z(^xyEF&Xxe64Q7Pldi<{SdD2sh>64JtP7^ec1)8p>^417V9EqB8A?n~QD+KFnINVL
ne9SJGyl;w+Nwlk8`dqqyL3twCs&+9BQ2-(wLlJyQUs3uWniO>9

diff --git client/target/classes/com/sy/beans/Type.class client/target/classes/com/sy/beans/Type.class
new file mode 100644
index 0000000000000000000000000000000000000000..5fd1a21c6394973469e27e51765b88defaf8d6dc
GIT binary patch
literal 1442
zc$|$>YflqF6g|_&Zd*&s`=LCl7F)_=eaDFK!6rnSiY5?@@zb=Oz`}Ny><%Qv_&@v;
zCYnG@_}~xlM;Y(Tt_9j^%%+{kz4x4R&&>S%b@2nhb3Dx;hPa7D7D*Tkg9rSCTMl>k
ztT&AV(Uc6v3){8jIzzm?u$x8-X%m?&ZXnAr)b!d`aB4LKcLQtZ^hhwo>=py7smxp!
zc?>cnT;8V0aQzZ}Tl%)Uw>nHJhO-#KD8odXABw8yHo1If%YB*!lDjfsD3xoyr3<}V
z4C8$>cS%CkYmtO}-FC&+al0Y>9o}%XD6h$#UGCdz9c?D$zD>L%^`8ESWAL?*`(EoU
z_o*u>d`e77FXUnvE%z0c+!J!MrA@5SDhOAJa!rXdDY&IAGJ`*}v2y=LGTYv<-xM3R
z(wSD0R#YCzdg*yGkUl>O^#yqY3mH_fXktlOyv$I%gtXlg?@&a@q3avGDLwy`;qz7Q
zC@}<m#od-8f@0nC4v&vkdnNv@P<z*#{-NG|;jW!)1X1OVvu#VUnu0|RE3A)pYmF@x
z)WupWvC=1o?567qzv}QH5P^w@4D<ihgo(!tv;R(|R}d!SHeKr&UD_CZ^aS*b?l_Gm
z=v*;I>v3AWM;r+n^Of&lmAP}6mF05`eA5LJ>elNpy*%}z=*uC4N!lq;A(deYHvv6U
zG)&JFQ5?5uo>uH?3!2rSf5rNUMwOaWte0FFEjdeE1DYemOGX?F)0l|>o)Nx^<tk^S
z_zVLV7y`a_kPICix`LAHpv+<}La``2ltCz8x{4?JN+^)Cp>yjbL0MpE*SedSrkWXz
zFs|1|$0#E*O4*ZS+8%~GozAR|HPlsiLxsMY?xNVy6bsoZi`Nb@)KsLJ`M+pVN7m7#
djw?>7s{9^GG^Qw6rr!$gYdD4nbcjzd^&30)5cvQA

diff --git client/target/classes/com/sy/feign/OrderFeign.class client/target/classes/com/sy/feign/OrderFeign.class
new file mode 100644
index 0000000000000000000000000000000000000000..619af0a73a7f0d56dca1c004a769cc71d5eb3e78
GIT binary patch
literal 1690
zc$}3~ZBG+H5T1pW(kt%>h^S~qY*E~p_>xd#A{tDSk`fyG#ZTMbQWmef^==Pr2!G5E
z{s4cJarW-$UDK*ZlkIM&^SsQ=-TwOh<0k;@!EO#F2&}bLmwJ7A!bL~Yx@&Xyz#Mas
zA+T`9&KY%>?9h7ajJGv`{E3kEe*d$u32c?B)mofVQ?gSjhXG#;ht`CrE68%l^{KLt
zn9I6cbJrt~MH2oUcSm#uvQGMjFW*36rhS(a*h|6vwicOhaVEXceB~V~t{?kSi!N^p
zPqZBVUP`5z7D}S@%bIdK)a$uIc210=3*~;L7raGVXo|8yF8##yA?x)p4=J<f%<<9J
zHdRK34%$F3gIccWWl#(5Sj!cG;;@H7^+RS}r#5rM^l6j1f*}{$$$0D>-K>?ywV>QY
zzky8xuhJ_hFHvtHsx#C{&vMMa`P|d{%I+hJWpf9M-tSj&yvwDLfuhj~Gx;~E`9B7P
zvCq}WXDoyRG5xpN3I`B9sbi$8*u4lFXI>Al5RSKjqF8;_3-_I&*$01)PCv*+ikXNt
z;@BA0ion;&a|z12#Pr=!DUAPJ&GLITyKeMi1Wv}RhVtDuKM)SG&&TiibJG_BFUAg_
z?I_=-s>fw`Jp_mkj^I*PrU>AB3+6M8S49@4AOku4H9HB@xaDzKxC*!?U<PJ!pF@aQ
z^Iw2?umFn~D^6ly$pk&b4UYNvXd(SF+(I!!pCzzjR3f_70o__amov6*gSoxd;ZBU%
zNMP;`F!y52Qh>P+n=!^pU}D=30?Z5<Hu!K{{l$OQ|0resMWo+K`YMj~^?1aW0dC*i
d*OMFgD*b;h<)OKt=1%baG)OIA^jS!^@&}F)jQ0Ql

diff --git account/target/classes/com/sy/beans/Admin.class account/target/classes/com/sy/beans/Admin.class
new file mode 100644
index 0000000000000000000000000000000000000000..edd17f94c2e42553a827d48087b12269bbd20f3d
GIT binary patch
literal 1819
zc$}S8YflqF6g|^7eNfu+5Jd&8wv<OfR8$^`k`PF$l7RTZPt$e+3+*o19WccBKl~Y*
zKuq}H5Aa7B@60Z3X%}Mr(4E&k=bm$CZu<Mr#V-J_uoOoC!6-sWgb`sFIN&F|+~DS3
z`F-_3)FeY>*)R>c$`CA0?)D*uz9`~JB#>mt)~sgPIW1QOH=Xk9debl&0!E#PDs85U
zW$rC0WPcKA3^2rw9buciDTtvXZd=-h7nw~Wrz4NJ<9xR4dY0r4B{7T<hLI*e6l<1Q
z<MN{+_i5%xZc2w?qu8Ccm%evrvUiJN@&BlH8A5ATot&jBhAG}1H><+l;njxrYSnmS
zm)nL~dz&G-Z;<lAN^dDi#lTx3_pSOCx2alE*c2I)mYa+~MPKRRJs~&g4zgE{wFf$M
z+{0XtKcziE&=0N4NjROWp`yQEh1v41$;Gr+@onqau8DO+S&eH~vx<bAy|FCmNShzI
z7M*kivvHI$7sb4~=qC*Mc0R*Au?~fo*1h|6UXzx6%J8jIm>1}hZg8{S5Kg{gS%=3*
zH{akD;Lhoh@CpA^>F$p!kH@1}<Bi6)A;nS*PZ<i@^%tYQ!luVBAO1>#6{g28AGcb4
zWk_zCrm)u<v@4t_78xG>ldmXVGTgg4l=|2W#ssxjfVwG2Uut5S1yon+F{j5q&@;g;
zT94AIL1T!<!O~B#($qPkrRj5|N;Buk{LrY|^c^OILWU5hZvy>L9h|})+AX<wjNvYz
zXDTn#GnF}@XDW9P_h_C9QUK@(v<WRHLSH3jfkp)kD>3ctam|sYJOetT%O3VJGTg_w
zN3cve)LFK4Mn=xa#~Csglpfz(Y!Oden<?93n!p2(soau6Ox@ryUl|XP_lmkoqmmra
z1?@I6PM8VJFziOPN*D1;r^*y&x=i#+TJAbErMflceKkEs!B11FTT_uRlh<fcm)O#j
z*0e=mO_^>@)4rM}{WWE}HO&!b{u)iWPE9%e-b)%jMM*(Dz%WC<1w7Mq4A1d`{t!q1
E0!F)DVE_OC

diff --git order/target/classes/com/sy/beans/Menu.class order/target/classes/com/sy/beans/Menu.class
new file mode 100644
index 0000000000000000000000000000000000000000..a3a0c421de4a755f87b2ca579aabaac4da5951bf
GIT binary patch
literal 2466
zc$~GA(Nfz+6o&sbmSj63V2rU%TS5{Nj6!gdwrLxJ(_%tG>!g{1p%=-`Vk@9vON=Bl
z!*u!<z35}KGxl^Q7kz*}RHtWGim@d*)0>XR+N0fb{{7C`qy77z_kRI+gdcK9VM;?<
zhXR#h_8mXxwGOwBYd;>nGh04``q;89zs@jKT|3MogRF*}jw{d^@-3%Z^Db&fCbzxX
z3)Ai~q^vgSG%tmkj(xl-0<Y?r!7M}C=3SFvZp3HbcdgKCPDcUr49b~nwIXgiPVcB=
zO1A|aB_XE1?eKHQ6;l-*i}-}}{fjdSEHuaH4rp?7j<Wtt#}ckFl)C)XY&dp{`#)L!
z30a=cZQo<)R-^cF)HqdwPaI$^?#1xtf86ho>d|o8RF9daWt%U1-6PXI;3ObQ>$G_1
zkh_+64=2<9iRHzrC(f2gXJ459iPL_?T{=SFbjdN}JHhr0^VP)klw;H1qo$Y}Tb6m!
zq8BU{Vl@!x8il@;-J*FPtYS63iSW&k@2j9^#zDe*k%u?*7!wH{gh-Y|c4bGA?Ooae
z<UqDnk+kD=4gdp>h3bTZ$n85lw`J~HqRv@S(hUJYW!-ih-}7C57Sz|9QBlv~3BJ|v
zooLr>hLuZR%RYBb%`o?%gLiq$cianx-$oM)9Rtzl+-`SFZ>8xtr@ga}x7b*q<d3_*
zZbmPQvF;8f8obllw|sLmgB^zZBI%#4_7+=T7Pr9GDqCG&mS4J<3clrFQhdZ)>=y=o
z&$dms(czwFdK#WF-1<)$YS?2~`nW6IAAvKj(*=^E+d-ix-ECy0#BC)<x{u^o3g79L
zp>Z12y;!FA>-6?3jVg`H#-CuuodGmseSm4>?f`kCk{+OFRFnbAe@KNJ^jv~Q&nrmN
zZdp>hO1}c_S)pC7A&;B1S`Rd_f?I&J1RIl<pi4<h@J&fe5T>Oi7!}+myQokQ$Q|Se
zase$u!mIQY@SoEtL=^#lNtl!R1yY=sG{MeFNW-v-YACQnvtn)0=u_f-%DYc#_bKT<
z%J1<h@cU3zm7e7h#l@lG8jMh}Hbf%DXz-0hoI6+#52H?_Kv(5KL=(DAF{@HxA@CZO
zR}IT6%BC<`Hio;yEJvB9qfAC3(*^}4Fil69HYlbxfk_<nkZDHB-oyO_rhJs?K_b%w
zI`0Ige3a=S#e6k^NwnOMsUT&)NUT#a%Je9a>C5Cg6{Adbig_}DsWe)rl9YW&3B;Mo
zQKs!grmyi$5>q+Kv`aD1CNPQ5aL6P+yD2Jw2;anG8Z)%GMgIn#N;yVi&+$Df{{j}P
B$CLm7

diff --git menu/target/classes/com/sy/MenuApplication.class menu/target/classes/com/sy/MenuApplication.class
new file mode 100644
index 0000000000000000000000000000000000000000..362c0056d1a8b1004d439fd36ba3db4e6aa8b156
GIT binary patch
literal 798
zc${rgO>Yx15Pfd*)g}E(OKABj+|nH4TMq<Pf=HY;fCvhQp1fN(b=kF7UT<lB7AFt~
zegHoTF?J&wQ1&pho_X`$%-Fwv|M&^u1)fD%!+I07HtJ|F>|BX!!84&}{9SS-Q^(MF
zskCyZ4C}q)X%j7mZfbH~&iPpC>Qzx>Diux{9U;QKCfaRmVvC_~?2MO%ReE+|MJ~S>
z`<W-kI6eu%rAp$q71^X0-|3GsQI^BArO3qjy5VuWia9mf$s5N<Mqj8|Wkr(7C5h2(
zddN^4nRCgo9V;#0R(T@rM~`Lb#3mKlR9NNDi(t)Ns*>R#UOltt%Y~xeyS-JdPAM<!
zj2QM-q-oz{=`PLrd*SDB(h@M5n98Q|jq>vQ|LF}p2gBiqN;{RysVbG9Q)}Zwp6X9m
zt|u&BRL-P}{m8{Nyr#sz1N8$zK2Io6E{M4JE5XO2D5RaF!h`GABCDv;UE0r}oDZxl
zOsSl)b38|r9+&^t!2I(fyG<ufo{_Kjzkz)X=^e6-5Zu5n+4d~}9qfhJKJF9B7oP+&
zpw(&izhmRmU40b9Hc51AiKB%s9*{rqd~{0zei-aSJR;wrzsKaC5d7&GSc#)Q5>e0o

diff --git account/target/classes/com/sy/repository/UserRepository.class account/target/classes/com/sy/repository/UserRepository.class
new file mode 100644
index 0000000000000000000000000000000000000000..ce5ea786dfded493d87a4fe1fecc0038afa2b8af
GIT binary patch
literal 229
zc${sHF$%&!5JmsQm}qPSFJKuPx7W(XN>LOKuvrI9NV2k<2)UYt2k=nhMnn*tV&Hu~
zkN<ey?f_;OgzyMsr3+yjVfdnLT4~dWgJrY(VhEow%;Z&yT$U%XNitRyVNko;LMdIB
zj^cRr5hW~3`*zGHe=_G<b9L6otu(UWij5`st&0%tb!`+c)0_#T-x<?(K|mmM&>p!}
ST?CFpM_od%4bgYsL-YbkPd)7b

diff --git account/target/classes/com/sy/AccountApplication.class account/target/classes/com/sy/AccountApplication.class
new file mode 100644
index 0000000000000000000000000000000000000000..2613619bcea4568d3b8b72024ed9970da78be253
GIT binary patch
literal 807
zc${@o%We}f6g_V9>X5!tXek8>yEKb<$AX|rB@(MCAcDf8E060=U1r83kEf8&Vg+Ks
z2k=pdYd4}ngjw7>KKI;nANJ2*-+usjjwcaTu-ZnWizZqOTUX**@Jtjbf0JA(=@?os
zbfMib!)pI%+D3<AUz(g(GkzkasS9^fmYJ5qX;VaqaHoxK7wgzy7#N%Ks<gUDFRaMb
zCu2YI#2CjX0bIx=d0UfB`tfZG<4jc5=xhO*IG;B<ikB%%Q#ke6@v$i`bXr@HWNM+r
z_$EAJXpGIdV%Uszp<dT{qU?LmW$495ifk&Z_UAd+aF@DbIEeo{wwKI>ruKLH%etLX
zT-cOEc9w)`>!-?Hn)A29kK&XiVl*+emFkuD9qj#Ea_D8~D&7&Sb2ZhK_R|)HaUo6;
z$4i$K)-P&j<a|qNei<(*@b^rEAdt@z0;;(X7k^6dQ&E=6PNeYU=C#Ob>UEp8G^}Pr
zt4dR8XY345(WY1CzZEe5&d6@kiIZpKn}e@lUqX0`Y%73k*e2V(A)tqyfZfGCV)^7}
zK@8~h+JkRc`*52dg<|VebYnrIgI(;Azwh<vq5^$C*atWu-=n{W<R20J@flc!!{43g
B)2{#k

diff --git menu/target/classes/com/sy/beans/Type.class menu/target/classes/com/sy/beans/Type.class
new file mode 100644
index 0000000000000000000000000000000000000000..5fd1a21c6394973469e27e51765b88defaf8d6dc
GIT binary patch
literal 1442
zc$|$>YflqF6g|_&Zd*&s`=LCl7F)_=eaDFK!6rnSiY5?@@zb=Oz`}Ny><%Qv_&@v;
zCYnG@_}~xlM;Y(Tt_9j^%%+{kz4x4R&&>S%b@2nhb3Dx;hPa7D7D*Tkg9rSCTMl>k
ztT&AV(Uc6v3){8jIzzm?u$x8-X%m?&ZXnAr)b!d`aB4LKcLQtZ^hhwo>=py7smxp!
zc?>cnT;8V0aQzZ}Tl%)Uw>nHJhO-#KD8odXABw8yHo1If%YB*!lDjfsD3xoyr3<}V
z4C8$>cS%CkYmtO}-FC&+al0Y>9o}%XD6h$#UGCdz9c?D$zD>L%^`8ESWAL?*`(EoU
z_o*u>d`e77FXUnvE%z0c+!J!MrA@5SDhOAJa!rXdDY&IAGJ`*}v2y=LGTYv<-xM3R
z(wSD0R#YCzdg*yGkUl>O^#yqY3mH_fXktlOyv$I%gtXlg?@&a@q3avGDLwy`;qz7Q
zC@}<m#od-8f@0nC4v&vkdnNv@P<z*#{-NG|;jW!)1X1OVvu#VUnu0|RE3A)pYmF@x
z)WupWvC=1o?567qzv}QH5P^w@4D<ihgo(!tv;R(|R}d!SHeKr&UD_CZ^aS*b?l_Gm
z=v*;I>v3AWM;r+n^Of&lmAP}6mF05`eA5LJ>elNpy*%}z=*uC4N!lq;A(deYHvv6U
zG)&JFQ5?5uo>uH?3!2rSf5rNUMwOaWte0FFEjdeE1DYemOGX?F)0l|>o)Nx^<tk^S
z_zVLV7y`a_kPICix`LAHpv+<}La``2ltCz8x{4?JN+^)Cp>yjbL0MpE*SedSrkWXz
zFs|1|$0#E*O4*ZS+8%~GozAR|HPlsiLxsMY?xNVy6bsoZi`Nb@)KsLJ`M+pVN7m7#
djw?>7s{9^GG^Qw6rr!$gYdD4nbcjzd^&30)5cvQA

diff --git client/target/classes/com/sy/beans/User.class client/target/classes/com/sy/beans/User.class
new file mode 100644
index 0000000000000000000000000000000000000000..ebe939efba67a86e802c8af869f68df7979991ad
GIT binary patch
literal 3419
zc%02u+fo}x5bXioS&Tt4ScHpkxC*cm9Fy1>5{!*aA~5FWI8IWvNP}1-?W%THPEo0R
zLtgWkPe`hwN|hh-0eQ+7rE+F=bz4TRJmev&8ck16ch8yAJ-vVa{q_$cx=*j-)I+^d
z3TYIk2&2J*RmnM*xl^v2PVU&@HlwIsEZW?07!BoL>u>a2SvO0$L)SLU(prLI6pvCu
zqdw9YU2hpYJAKUyE~Cf;!!+CtM!oY3C*rtk8V%5OMm<Im4s9Xx76J;3A&rs(O{@k0
zre5Jfc|)UNsjTXb^POcEh4Q9GX{j`g!bQXKJ&neMGE(AZk=sHwq0yvJ#a&+J)pN^~
zhEp2dqW2kTHZK{D%k84>@+PL5Ym{@3pjjINS2G&T(j23aihjYjEVH1yFAVn_lH=;8
z3wC~<58mY}UH`47h48Ay!c`Tc^g+#ZjS4?89OJaiH%-%Wb=SZh7_H_lyOeXP!t~4r
zmEiaycV^iY-OcGuOL^WAVr<JD1dUd87u=bQ5|{Wb@9r)ak=aCvyPJ*5NzE(qgtn|A
z2p`BBCf}=7PPu)g1DB{YtDu)pblVVXUm0@G4a7?3uM{alC7ib7Zp<qPIYDN3xqEIE
z_jPeUV20_B|F5h8WX!d^6{9dX+yR$E9rQ_**mS(j<dqwUD1C4}_MZ<{PR9y+`~EBP
z_S#n1+w&ijx7S+5vG+v2DacMs)}TLXJS;4oj^zM$4>}%L^ExdmVCDqP8W(F>iHju;
zt(sln+lDBKxVY49VTI&Av@F+gZN2Jc*%^q?UV@&{ew3bz*L%Qdy2X@XzOgR2PrUb_
zxAlT+*_VudYNymU^nyOs&0?85(|OCfs8!#c^$y3Q%c?5jukyi;+3|Ay5L<e=d}x4x
z7#%Sxi%WlR6xZ2OrqLnS=h)m*rqLR`Rih_*E3X-Pa<dD1%l7ssg8B_#Z2o|B?wBUG
zx5|jkohZFvH1n^>iPB3(6Yn-fllF{h3jH{SJ{!Y~&jX|$@ez>ous^5$dCZ?D{TWT1
z7|lcO!@Pizb!ZVAVQG+rVu_aVe;cbDW`;SO{f*c!(m#j)h*YNN1N>{A0ewg-m>J!n
zk6<O7H!$}I>+E8k*so3Rgw)=IPg+J8_N@E}LJG?h?uxj0x-x7Zt@>gA!W_rElKq{c
zB6NRtsZN90<vOLZ=}?_UvgvT0MziTioyN22Xq__IbgTnH79a@JglHVGCg>XINm2%Y
zrXby-8IZI{(||N1A%5+h*o3$uX=hRr#P>)^P~R&hL4HU|WAZve5($V%Nu(euC2`T1
zyy#R6AqD+{4?+L|kKjZwC!d6mn~B+nn>c<JiRs4}#7JR`V2omnV`N0q-r^P%%-lj-
z=4P9j>ysK0{Z2FOpg5SgySUk^GWDO(Jw@I02T#AJbiPk(s=Db99={HsjV^WLCB?6s
z0U7pzvX%#fm^PJ|*44E<7{v4#KHFU|CEIH`DZ_3kF{Of-c9fVtRbxs8G3~-<uM4K(
zc1*)E>}N_$BSB2hm6$fwm_~w_j^T6C1yi~mQ(A_7sKhiH#Pm{$X-kc1G>GXN_<Y+1
z(^xyEF&Xxe64Q7Pldi<{SdD2sh>64JtP7^ec1)8p>^417V9EqB8A?n~QD+KFnINVL
ne9SJGyl;w+Nwlk8`dqqyL3twCs&+9BQ2-(wLlJyQUs3uWniO>9

diff --git client/target/classes/com/sy/feign/MenuFeign.class client/target/classes/com/sy/feign/MenuFeign.class
new file mode 100644
index 0000000000000000000000000000000000000000..0361966abce4a3dd33818d1ea667b6478a1bbe36
GIT binary patch
literal 1685
zc$|$?TTc@~6h2dW=OS7tBH{%>S}%+kFHwvMh?pizBw%>Zr|Isr3~YDm?kw04{+JK`
z0DqM6%xv8)c8%R+GdnZqyPR`o=jX5QKLFr0JS{+mK-HEV8uVz3i?&C1xfkx}uL5KV
zOdqpTMqTE$>Br_Vw-tdxOL)$v>k^o$H5zrxM1)GX)DnT(K+G;zN7C72KI?GB{eVCY
zA^aPTuILElC>@{xQ=!iZ)KggASba}T&b+{Q+IWl9^ZTKvM28=WKr~&x>3LEyC8UQM
z&n)S;Y0&kB*KTR)GwGkuGv1_4RHrPCr60K3W!)~uA!Y8AxgpwEq#abD{p9GmaeP6~
zjpGXfOP8hN>@InDF|vm}rj8DoFBo!Z7q&!t0%Ns$gTQ#?rN36xp0;`ohrmkBN*ZEG
zOrV}pDFPXR!IdN<jmDH5%p)Im9i}khYApp?|4bmOVFaF!o{J0y3OW(V{*f7-W}klz
zd7!qW(?goF!(FUzly_w~Z#4RHWa@3hm3W+uJSGzT;$#DMik{2Sc7I~pu+{q{(v4uh
z@~YS6+UNX0;|zkHM_b5UiW*^PmhsFFcXH@YdNo4WzkZe4VE2ua%O`rkS@}SQzRh=p
zi|J0q7r>epBCwuXW!sgZLuHqH(Y0X^?_9w>ZM@iGuG?hx3I11B`t|bO_ocs)CxC|@
z^i#y^CI@-QLIG!`3>5W%ZyDbVjKc(uQy4yp@6;C{0bGG;T${__!d1N(ASV7SA>TEq
z;A9v$gL|`3MP;p(BQS@<aM*RjKS2`GIRwtbjRd$b0K6Fk7Y(qWfww^4qqpHsy4c+q
zvy>`!@Bd=Ue~Yca{RFd`nptf~Y!!iZc+fBZ<XBw()wl%@Q-~fJqNTC)77WlM{;^?M
RGc41%OmT)=3-H8-_1`g0nRoyI

diff --git user/target/classes/com/sy/repository/UserRepository.class user/target/classes/com/sy/repository/UserRepository.class
new file mode 100644
index 0000000000000000000000000000000000000000..ab4eb3908fdc74f997a4f2699a77e50fb3b18d86
GIT binary patch
literal 551
zc${rfO-sW-5Pch)rj6gW){m1HA-R~l6+sU|Afj0GzD?G;B~8lirkKCx!5`p{5+|ux
zY`ZYb&g^?LZ)U%~KRy9m;?#k~a2Ds2K$n3M(_BlFt1@`jLOuP34jK%5V?N_S%Ck}M
zFdU26FgUL=OK#GXq3eaAAJvG$$TWzgHhtpU3-gvIk6iJIFhXetn<(O)d@3iBYP1J(
zlyOri!Qii{auxlm8w#H3T3G*@O51T>WW?X_{E(qlDY-4fgyGza7D}T$8}<D)B^WG8
z;D+WiYTWbIK>QbaFX+b5ET#!J1auRT(jfCroz+f6ap%}M#2w^?ip8BwiQM_W)r*SU
zWS|*P9fy`|qX`QRMQsbM%8|Kb7B=a53)`svVh6iKt6(-QxlZllV3F$7sqSj(5WQvM
M(GrS+<GSI=527r3*Z=?k

diff --git client/target/classes/com/sy/beans/Menu.class client/target/classes/com/sy/beans/Menu.class
new file mode 100644
index 0000000000000000000000000000000000000000..a3a0c421de4a755f87b2ca579aabaac4da5951bf
GIT binary patch
literal 2466
zc$~GA(Nfz+6o&sbmSj63V2rU%TS5{Nj6!gdwrLxJ(_%tG>!g{1p%=-`Vk@9vON=Bl
z!*u!<z35}KGxl^Q7kz*}RHtWGim@d*)0>XR+N0fb{{7C`qy77z_kRI+gdcK9VM;?<
zhXR#h_8mXxwGOwBYd;>nGh04``q;89zs@jKT|3MogRF*}jw{d^@-3%Z^Db&fCbzxX
z3)Ai~q^vgSG%tmkj(xl-0<Y?r!7M}C=3SFvZp3HbcdgKCPDcUr49b~nwIXgiPVcB=
zO1A|aB_XE1?eKHQ6;l-*i}-}}{fjdSEHuaH4rp?7j<Wtt#}ckFl)C)XY&dp{`#)L!
z30a=cZQo<)R-^cF)HqdwPaI$^?#1xtf86ho>d|o8RF9daWt%U1-6PXI;3ObQ>$G_1
zkh_+64=2<9iRHzrC(f2gXJ459iPL_?T{=SFbjdN}JHhr0^VP)klw;H1qo$Y}Tb6m!
zq8BU{Vl@!x8il@;-J*FPtYS63iSW&k@2j9^#zDe*k%u?*7!wH{gh-Y|c4bGA?Ooae
z<UqDnk+kD=4gdp>h3bTZ$n85lw`J~HqRv@S(hUJYW!-ih-}7C57Sz|9QBlv~3BJ|v
zooLr>hLuZR%RYBb%`o?%gLiq$cianx-$oM)9Rtzl+-`SFZ>8xtr@ga}x7b*q<d3_*
zZbmPQvF;8f8obllw|sLmgB^zZBI%#4_7+=T7Pr9GDqCG&mS4J<3clrFQhdZ)>=y=o
z&$dms(czwFdK#WF-1<)$YS?2~`nW6IAAvKj(*=^E+d-ix-ECy0#BC)<x{u^o3g79L
zp>Z12y;!FA>-6?3jVg`H#-CuuodGmseSm4>?f`kCk{+OFRFnbAe@KNJ^jv~Q&nrmN
zZdp>hO1}c_S)pC7A&;B1S`Rd_f?I&J1RIl<pi4<h@J&fe5T>Oi7!}+myQokQ$Q|Se
zase$u!mIQY@SoEtL=^#lNtl!R1yY=sG{MeFNW-v-YACQnvtn)0=u_f-%DYc#_bKT<
z%J1<h@cU3zm7e7h#l@lG8jMh}Hbf%DXz-0hoI6+#52H?_Kv(5KL=(DAF{@HxA@CZO
zR}IT6%BC<`Hio;yEJvB9qfAC3(*^}4Fil69HYlbxfk_<nkZDHB-oyO_rhJs?K_b%w
zI`0Ige3a=S#e6k^NwnOMsUT&)NUT#a%Je9a>C5Cg6{Adbig_}DsWe)rl9YW&3B;Mo
zQKs!grmyi$5>q+Kv`aD1CNPQ5aL6P+yD2Jw2;anG8Z)%GMgIn#N;yVi&+$Df{{j}P
B$CLm7

diff --git user/target/classes/com/sy/UserApplication.class user/target/classes/com/sy/UserApplication.class
new file mode 100644
index 0000000000000000000000000000000000000000..f07b99e921551f6121656530e52efa7713095a4c
GIT binary patch
literal 798
zc${rgO>@&Q5PfR%)sTLrCA55VOLK^B90=1H$P6bJ7y{wYlkBRlifwr$xsad535Ekd
zfFH%MQZqC#_F>oBef!?-O22;p_zB<{9(S>Z^)?zkG|^(%xfEA|XQD{?oA^>Dj-mBj
z70MkmtPhXoZFCq0iO#uQ@DEm+7iF2LL^!33F1onYMz4oWY%z?qNx3bJD$;W!a`{=C
zPdwJz@mUD2R1&wT$i~CyMt_<KYbU2Gk(u*#lcT7PInjlaUmTz6;#{Sb5pgD0B&OHt
z2}5J5&m_Zkqzd`E%42EXdn`jg(uv6C!YF@U1{>}|S%!nCerC^?3q`#ThIOsZDKAV)
z40|<c+V_cc7y9h2@N+n62-uzJ$|UlY^78xt>5V-H!{NKCa4MH`WtE?^D6|WCsz0t>
zPguODoKBYek;`j%Nr`_48U=!U5mUe}iMaSH!B0e4N;6A@2RE-oR#Bt7w4bqEjEyX{
zRZg1)o}f*S%YSQN{&|tzrV}U6$Tvsdz`lm`4%t=+ZeW*e?;3zU_CjnQw+ZEop9V6Z
z({GQyW8>pZeK&}0lIYe7M+XDkA%Ecc=#~QfFxb1eN4`&g_sKsX_`_2$i${L|P*~6$

diff --git client/target/classes/com/sy/handler/MenuHandler.class client/target/classes/com/sy/handler/MenuHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..99364f084d2623277ecdbe9099ea0fb1d910f4ae
GIT binary patch
literal 3309
zc$}S9ZC4XV6n-Wo1j3?}7ZJ6Jik5)7t@Ry?1uPmHloG^N`Zh@hSlR5x-3d0w<NxT7
z=!dqar#<+gKcGLVr*~$T%|bRU77otL_0ID=_ujcP``6!Z{{(Ocehw*gWsx?JK{vy|
z3%<imn>(B4lky8ukqq5;Eyt3x3|*7?wO;g~H;bHsJ{SxqDsIj6o8}gGs<!aVCE+w4
z26Kkq8m$(EwdpV%FNU5QYOVeB|IGB^2##hkVBkFrG8{{GW5{k;PIb<<8HOhdg?v%#
zY)H#Ci<U1n%&>tG9An5-+=e5y-a;>qV=Rjk22SGCzVJ#-Uy2%exef9i2>>nET=pzS
zmZT?mZDx>iblSifj5CbZ__kPZoeG!FEV)H9UvfwK3=@;Z7HrXVHfQoN13_72%HbT&
zXE9;m0xmKPCD2ijb+xi7+>yz4i2Rz0a?(H^Qw%*SA@j{bmEl5yfH03`!5v@cQK#sV
zfy=l;HEq<ZTnftfWP)e@x$^zcz(=^skgEz?ND)vCwNq*5YX+_>;Iz+ogfiSTa0|C-
zw=TwfbJa@TT~N+52JYe$Ix#^^+IND=+##>6vNMdW5WH0rYnE@7Z87IKuH@39>M-0Y
zy56SgtE6sjc)TWFx!!gd=mxJy*K3+Q+F;H#r2ES9M3rFE3vQLtbF^qV;&G!^7Tzi+
zc!t5ETjBN^_bjyzjcK`M5#Om|=XM~>3<W2CU|<EB+g8n@b2qRg<d$1q=1QIv9-;J>
z=)iN?@CZ1caMtf8RBV>uuO&wNN|enq5yu04AmkFS*VUOKB|F@15Y=%r>@f4S*7?SK
ztu?-3IJZB?k=T97zHw;!WiGe&5=a74s@ekwOU-b^+&kf<s7f-@>OP@Eln_6|^~2M<
zek}Z~xz`GZM_3Ur8^V|KZna4WHxIq<zHX!zcb^$=t&FL9hk8>s>p~fZ%~tQ2uLCQk
z;r1aKqth8VZ$=$<u*@-rT*+;C6|rckvpo<y#8(tcr@l(glrQO~l%8t`J@77Db&})R
zQc5beCDi3UFz>q3mmaSN9poSF#zqdC*vi6ESN03KLRwj}oE>*tgg0q$i!TN@0K<>*
zTPbu5K!dRTiK6RnH|jI(S8}I~tCY$F_x0kz=XKvx5kf3*+b&sB%=CbsyP?Z%Ka9aB
zIF9fZZ0`HQ&%&ig;7~DS@si>6zq`^A44iS6Ui%cifz+hxy{B=OR^2q-qp_F9j9z_8
zE0ab>V`l0PuwQ7B!d&PK+B&cQ)ecy|eGN)4KCRT|N9dwo@|gM!*^{Ss(cgui4`2*y
zjPbxP#89)(uo!YYpjiqJm9!L@K?b0pVIFDaN67JW`YW!3`B=hZvW=$5@I)DX+7nG5
z&_G`kv{mW576zA7`gSqI@Y4ZxW3dQxp}Ka;5t`BKjkHF6LI^6oqrYNw`YqlEe#cqG
zFujWpQn3W&wA&eiAJ;U;f^AU}MzM@92wH`nVYEo%UeVzitQF%j4fHt>s<{`c=?fK1
zr`m$N7-R2?*!xhzYKy%TV}Ba4uW9zIVt=NKPu~_)%Ku7(85a?xVVcr#>0Q(CWhCS)
znqBW0^vCT%U;Y0<KR*~WeG+vbzR^y6s{`?RJjnILT7TVEYci{Etgzpnl8Q8q{XxH7
z-o>4CTf@z2{;9w*;_r_du0L!zHB*|pv?l7@z1CZg+V7hLjo)gG=ejz!U!**Z?=;Hy
f8fB1XoW^p5R6&*2J+v0|w~d-UD+~_m@G$ld(%SC@

diff --git client/target/classes/com/sy/feign/UserFeign.class client/target/classes/com/sy/feign/UserFeign.class
new file mode 100644
index 0000000000000000000000000000000000000000..6df44408e5856690ee4e5b956538fc1db44c668e
GIT binary patch
literal 1368
zc$|$?TW`}a6h1C(vtB5JZY^Vs%V5xegoVUKq6ldN4OQyIw23~zliRqRM;e#d>8Pgt
zF&_8<{3yh6Qj(TNS|d4*o%7vJ<Np5h^A`ZTfu|N^2-JFVNY#Y)xfpo#v*P}~d9ol&
zVD*%Z8FiUApr5*@yr&6Rec?H~u1jF8(Q4W4up-dHrEQ^f6EO!|pGfDB`E1BF_Z5L0
zLii7yT`?5MQ8-2crURc7uv1vxwx^!DoOvqr)O?538%Kes#gKP|5?z<?dY;rw3+bW8
zi?;L!RE>P$4f;m<O#0vG8Sm0As#6x%(vMspu+a$XkTN%BZh$tnXn-no8jhZajxXqW
z==g%b_PlhQZqCE2r9B)nebQmRV8~@$^d!;~xYDp&1WJ*Y>E4R*v^Qxv1a=zj<OgX>
z3}B~pia<tSaWzR~&=|?V9Qk16FpYt0jTET;g+SK82)tZAi&QfWEl0BdWR|Bn;@<<V
z^qzDkNK<sUi~WsqR~K`m(br2;e+an}kL!`gL}J>UtYTyIT#Q~%7g3VPNP5#c_|ea%
zj%tg?GVptRU%1FpiO<zDlZ3$YRP#Mo1`d@Y?nS3DM7(ze_jEH)06!2gmxV_&2YJYX
zg{wjaR?LK>h$90fDC1ng@~b#1Ux6sN2CKMN&)~*&v#AghKNgVh22^pe2wcN=>rg{w
zqm?62$7!+bX2@SA327aH8*nQDZq5L2$H1)+Xc^!gF#kDs;a<Af{TQ>ID)!)Vv4{VQ
a?ZBhUFpuXj*xp8Xx5LsB?mmeuZ2kpg(@g*X

diff --git configserver/target/classes/com/sy/ConfigServerApplication.class configserver/target/classes/com/sy/ConfigServerApplication.class
new file mode 100644
index 0000000000000000000000000000000000000000..e5f4f4d3e7d309ac49fa51bb55103d59eec02b90
GIT binary patch
literal 804
zc$|GwO>Yx15PfdbY`UZ$q);f7s@&2X@QnkhDnSIN<wFF811Ims-MZ}Bk=I+`XK?~?
z;0N%d5MyVhE>ggU8F^;jn>S<s`u*c4fG0SLv4-^sojx|uW!SwGSArKp=lpegDKp2=
zJylw{Gluoy$t*&T;V3gDufFh!(dR0kN_!>k)5W4tnQ+SJ7%^@{==ZUOZHAGtIj<I0
z>HOS^QhqY_BTtQSd>Vo+B=xX0*>sp(>zEXxs>UB$k*V{z@kz3ZIWyYH&#n<yTagyB
z)nc+tj~O}>GnWiIiPG{_U8d5$^R*0v#AKqF39J0Q33l9tsu+%w|IhAuOQC3n{oyLf
zGs+8_6Vu*`H0}STbQfm+M)-N0v{V>RO>HyzLU|d7|LFV3b1@vet+i97oT*CrxwSSf
z<ca5O<+{Q{h}xN~*_Ujd<ryXZ9_)1Wz6(>&`4Y{mpo>4(erau~V?0DeU(KI2F#p-e
z?$C{sXXH0V-@v|x^e)+M2yWsg+5WNs1MG#^E!?Im4}KiTfZiY)eaGheYkVA<ZBf(h
c7Do^JxI_M~=c6|Y<p;su!~F(!Nd5uv2O<R4v;Y7A

diff --git menu/target/classes/com/sy/repository/MenuRepository.class menu/target/classes/com/sy/repository/MenuRepository.class
new file mode 100644
index 0000000000000000000000000000000000000000..b1a6ee717bfcc901101c6752d0e8d271c4988210
GIT binary patch
literal 728
zc$|$=+e*Vg5S>k%q>Xo5>;3Yeki3{@tqA%c1X2_$zHgJYZpo!2n__;=2S31%5@*xW
zqKRN&+3d_YbI#1}=hyoO09?Yc4hn%2FAnWAw-YvwQ!e5pw|gwg9_L3L>IBwDbVBWb
zMnn64Fk+q{puh0QzX<{YZPRfqw?Jfq2e!*o(M3*=iPzYFpa~6`U`a|qMGAYvJ>Vh7
z8qGc*MpR@8BVbijxpHUj28>2&VXS+NrByG^BIMUh%OTK^PHuC@CvaxE3#V=z4ZBuF
z2?7d7a6P3H6z-T65bGK9A^s82vawGE0u7%9*vM3=RaQbub86*DmOsUY%5F+y(nLOH
zvf{-*@P7@&C<ZbUuCRtvGWv0rc<hb`*h=f?9iL0QMgS)Y@@wFgtDu1bI-Z&eG~|ZM
zz@@+vrk7y_<jYuvHKa+HidSBQHehoRY89b&IkW|x-^6X$nMtnH=90T}**%2p!@+_j
KQv?o+<k2_l-l&TJ

diff --git client/target/classes/com/sy/beans/Order.class client/target/classes/com/sy/beans/Order.class
new file mode 100644
index 0000000000000000000000000000000000000000..30241f360e51faa825f9354a15c21d70120b881f
GIT binary patch
literal 3166
zc$~eK?NZxD6o%h5mJO~6Ujgb8K9WLe3`9w38VVtSn1V@cpcqKo^lPzI5Lgl;$(hnl
zdmX)m{%mIK=}dm~0(w!Mo?XcXWVuuRG&Aw8R_DC?oO5=M`0MYte*##<VFD3!#1TzG
zL5!jIgumu$g_}p}_Th<Eav5TebyIhrFm$A+54zBat~e4&yn`e|f5|db=UhG1xap|d
zc3HC-B6^vG@)t^Z%RE{Vo;Q-{K`%qp(99~sK>mt*ffl7%e-Z<@NoG|?=mpI7X;GRD
zB{7V585CYNbd%xcRl8NODh=ODVg$EHugqPoiB@&>in>NC(q=4)aS@T?xU|$y$+?}x
z9lXylZ17VpYndhPzSP}gnvsd=It;(0gF%J_6apW{8Dt77PhVOny0%VB45{6!>FS1d
zpga0uMO!sZi|BPCWSEn?e9s+Mvwtuu>IpBMI+m&Orjh!bp4Tng;O>$L{Ft9ncIL0+
zH(3-;<Q*&S?QU*uFvQQeOP*AYfphvdS18Pt%M-cWqG2pLgw-i{f3!^6N!cju%`7k&
z|7RKx=on<JGHu_J*G+A!Y8-0z9;fWlY0g_EUOC{lE}s3xsC%qCEr&}Ub&9*Upt;9Z
zd57EF&?s&hq2(2boYJ9XQ;sxulkQ0WmDiF_)WLf>(2^Cw9w*m=ygY;C+?pn`a2ggv
z=@5g4$iBQ<Eg~|po``1=6p;o(q?1Hey^A*#RPky-Hcr!KI2~rvpjnd_vzd>J`gthc
z>qbT{-ZnUjt~3za`O`$vs@f%OT^A)x$ZFja&Q!5ymgPFG&Ck5jIXyA#B=8w_<0y(N
zzsE3nk$K&GZJla<?Yu6q&P%RkpELY=xkSF9Cz|7CxuQ9fdCNMjo-MT=f_9F3=Vw}o
z`Kx@eFJEa0zC@N+Dn*_0(g{k;LmBl?dU=`6PKbspM$u8lC|jnOh?Xcu+4h#%&kV^;
z)70#2g*%Ss#PJ2ggKKw$I9@T#T*Hmdz3=!9!_<GuY8>A&jQzVQH73s(x2eZRsH?~5
zmp)xIi->QL9O+{tNBWw`kv<lnLqPLk8mG{KyBa<~8q*Fkm~k*mM&nYXhYS?V(epie
z`i;gojdwGDfMsUth-YT&=+4a5(U(a@>ln<WlsZzGRIHBCH*zzTe(w+*(2ppgbP>!A
z4AN`}DFPTLs41G=CySh?jtBS<kTVeqlQR)aM9xGw9dafDiprS?Ns%+b9m71$Q!#QE
zA%I*&tRORx0c21y`V~RV(<ru3L{JyZ3Ax({>EDuU9*5$yF?@uFzCcb&0b`jOC8S3A
zs8Kp<l#CjsqK478m;ionDtp!wmsH1^svqN#uc|h&NHyp@6N<EePy9kXp;4X&S)^c4
zD*4=(3Pb*xX(T-6CtRdYVKRM;{)$=(Vd@St&4)5Q#&Q@_caZ53`7E?y5~Xi4^+?$#
zcpAdg7i3xrWm>^%7*k)6=_&cFv|$p5u*ozaWuGA%!Za9U%7!wn;nOgt!64HH`Q+L#
ziR;j08kVx_<j~5L3NpP2Wy)bQj42gl+9sc!HcVcx@tH=X?DNnwJ{n{yhBCbfKjWi8
wrkCXNc^jtj%V%7)gAU}SdjVTCcGAmj`oB*iqH9G+=u3RHlET;c796R60KX7<+5i9m

diff --git order/target/classes/com/sy/beans/Type.class order/target/classes/com/sy/beans/Type.class
new file mode 100644
index 0000000000000000000000000000000000000000..5fd1a21c6394973469e27e51765b88defaf8d6dc
GIT binary patch
literal 1442
zc$|$>YflqF6g|_&Zd*&s`=LCl7F)_=eaDFK!6rnSiY5?@@zb=Oz`}Ny><%Qv_&@v;
zCYnG@_}~xlM;Y(Tt_9j^%%+{kz4x4R&&>S%b@2nhb3Dx;hPa7D7D*Tkg9rSCTMl>k
ztT&AV(Uc6v3){8jIzzm?u$x8-X%m?&ZXnAr)b!d`aB4LKcLQtZ^hhwo>=py7smxp!
zc?>cnT;8V0aQzZ}Tl%)Uw>nHJhO-#KD8odXABw8yHo1If%YB*!lDjfsD3xoyr3<}V
z4C8$>cS%CkYmtO}-FC&+al0Y>9o}%XD6h$#UGCdz9c?D$zD>L%^`8ESWAL?*`(EoU
z_o*u>d`e77FXUnvE%z0c+!J!MrA@5SDhOAJa!rXdDY&IAGJ`*}v2y=LGTYv<-xM3R
z(wSD0R#YCzdg*yGkUl>O^#yqY3mH_fXktlOyv$I%gtXlg?@&a@q3avGDLwy`;qz7Q
zC@}<m#od-8f@0nC4v&vkdnNv@P<z*#{-NG|;jW!)1X1OVvu#VUnu0|RE3A)pYmF@x
z)WupWvC=1o?567qzv}QH5P^w@4D<ihgo(!tv;R(|R}d!SHeKr&UD_CZ^aS*b?l_Gm
z=v*;I>v3AWM;r+n^Of&lmAP}6mF05`eA5LJ>elNpy*%}z=*uC4N!lq;A(deYHvv6U
zG)&JFQ5?5uo>uH?3!2rSf5rNUMwOaWte0FFEjdeE1DYemOGX?F)0l|>o)Nx^<tk^S
z_zVLV7y`a_kPICix`LAHpv+<}La``2ltCz8x{4?JN+^)Cp>yjbL0MpE*SedSrkWXz
zFs|1|$0#E*O4*ZS+8%~GozAR|HPlsiLxsMY?xNVy6bsoZi`Nb@)KsLJ`M+pVN7m7#
djw?>7s{9^GG^Qw6rr!$gYdD4nbcjzd^&30)5cvQA

diff --git client/target/classes/com/sy/ClientApplication.class client/target/classes/com/sy/ClientApplication.class
new file mode 100644
index 0000000000000000000000000000000000000000..fb959105f01697e80967573fcffcfc587cc27b12
GIT binary patch
literal 782
zc${@oOK%e~5dPez*>p)Cq!8NjkhrBe;9FG@R0&q}v^+#mIB;?{&emnuj=WwTKZ_HH
z13!Qtg%~@L8pN`P8GF8&Z)U#ruirm@0(guEF*dLnq1D9}+6?<w;-lb&&^doKy^@(@
zXg^U}xpRii!O0{-hv6_YC9l5lq)<}3r;A0QGU1fbF=E_^(CuOey9`5Pb6zd1()rwq
zQhqY_1D_h>_&5aDDv90JWT%7ldV-`7RW*9Q78yHVH#$k1m@}iD{OovQ^jzh&71Khl
zwMdrmh@q93nPk{Ym6k8-aw_dxpUcooO(u$ou*%<8!IryJ6~l4*zpXuEDHKiLA2ba+
zAzav;I1U<M()@*VmuB`__)VO&lo*dqZ8LeH`~dxbIzI9&3`cKj?Nlizs#1Pet&Iyf
zF`PF_6vP*`GucWbx%w5)2>5%Yvu2G8Q_r|rNIjP-*ZjHmB3=0Na>{CihluD=`ELWv
zKP$3(bmQb1`K{qMu&)8$C)*CeZQLZ=T_&K1gAlug+mz*tPXigy=|#iu*nW3iABSc;
f)O2@^qk}%~kU#W%q+v)u3icRxS7rCe-v|Bx5E{+F

diff --git client/target/classes/com/sy/beans/Admin.class client/target/classes/com/sy/beans/Admin.class
new file mode 100644
index 0000000000000000000000000000000000000000..edd17f94c2e42553a827d48087b12269bbd20f3d
GIT binary patch
literal 1819
zc$}S8YflqF6g|^7eNfu+5Jd&8wv<OfR8$^`k`PF$l7RTZPt$e+3+*o19WccBKl~Y*
zKuq}H5Aa7B@60Z3X%}Mr(4E&k=bm$CZu<Mr#V-J_uoOoC!6-sWgb`sFIN&F|+~DS3
z`F-_3)FeY>*)R>c$`CA0?)D*uz9`~JB#>mt)~sgPIW1QOH=Xk9debl&0!E#PDs85U
zW$rC0WPcKA3^2rw9buciDTtvXZd=-h7nw~Wrz4NJ<9xR4dY0r4B{7T<hLI*e6l<1Q
z<MN{+_i5%xZc2w?qu8Ccm%evrvUiJN@&BlH8A5ATot&jBhAG}1H><+l;njxrYSnmS
zm)nL~dz&G-Z;<lAN^dDi#lTx3_pSOCx2alE*c2I)mYa+~MPKRRJs~&g4zgE{wFf$M
z+{0XtKcziE&=0N4NjROWp`yQEh1v41$;Gr+@onqau8DO+S&eH~vx<bAy|FCmNShzI
z7M*kivvHI$7sb4~=qC*Mc0R*Au?~fo*1h|6UXzx6%J8jIm>1}hZg8{S5Kg{gS%=3*
zH{akD;Lhoh@CpA^>F$p!kH@1}<Bi6)A;nS*PZ<i@^%tYQ!luVBAO1>#6{g28AGcb4
zWk_zCrm)u<v@4t_78xG>ldmXVGTgg4l=|2W#ssxjfVwG2Uut5S1yon+F{j5q&@;g;
zT94AIL1T!<!O~B#($qPkrRj5|N;Buk{LrY|^c^OILWU5hZvy>L9h|})+AX<wjNvYz
zXDTn#GnF}@XDW9P_h_C9QUK@(v<WRHLSH3jfkp)kD>3ctam|sYJOetT%O3VJGTg_w
zN3cve)LFK4Mn=xa#~Csglpfz(Y!Oden<?93n!p2(soau6Ox@ryUl|XP_lmkoqmmra
z1?@I6PM8VJFziOPN*D1;r^*y&x=i#+TJAbErMflceKkEs!B11FTT_uRlh<fcm)O#j
z*0e=mO_^>@)4rM}{WWE}HO&!b{u)iWPE9%e-b)%jMM*(Dz%WC<1w7Mq4A1d`{t!q1
E0!F)DVE_OC

diff --git client/target/classes/com/sy/feign/MenuFeignError.class client/target/classes/com/sy/feign/MenuFeignError.class
new file mode 100644
index 0000000000000000000000000000000000000000..6c0fff06e9fd63016fa61d230c9c18037851fe4c
GIT binary patch
literal 1554
zc$|$>%~BIV5boK{4~Za=U=RTf3X%k5Jz1rpD1nlySc_Uhaqu?D4q<S2Cbc_@=AAs~
z$tn*%fDdKaGYJus1#;M(?&<EYzy6uue}4V~fS2Ip!2&xAsYysfhCtzro>RxCqV2qE
zp0So9klEsbt8D^yrFxu&2?7f(88}hbIbpmloC7A}eJ#BXLm6fvPoR|SKp?dzJw{;K
z<$}G9gC+})Xw%1=8CSNbe@sKJ_5Ni_o$`pll6y_QI)Us77v7HV6PT?u8dcYn5G(FG
zE{_yCq|wg45FibdeI9VEs&K&6sr25{kOoY#5cA{?5tOPp#MIRUq^%1cO-4mzc+|Hw
zd`recnf_pc3C(7=+wcgiR@{H>bfsw5s|gSUERN2FVPEWg-0`SFHl<2JT=gS%C_sro
zF%dTJF&|6oaVd^+(eV*INBq30V7Gh3lRdGljOuon2Fms7Gp;MxrO^^c`u}1Kx2u|)
zKa_FUV*6Y#MDhRGZ)ykv^B<5r57;q}IPT4k5K>XarNEiiTp6~Vs1tJ0KGCE8EW=Mu
zgac<%SLE!;pd$qnst(JL#m9gZ;>*b4i4Ow*w@`ENBzUH4KY)Bk!GcNrXUt^|rtm-6
zbAa10jVF#1?tpEAU!i8}81ii>a>_)Od)9uWmS&)6>=w+TWWimXMPCD60F;br4qfiS
ze4pV)pP^-c9ZE8DiJmo}cOMo|(~-|nvl8jenaEPldWqg5ETLVKN)uEx+yi(x3^zh#
z@d~&yHhutCHgJ#N@r`iH<Fi{CgWZ$y*{!1UO>pa1z^z?ow`SlfQ0;HZ8`M&Xqj+ZE
hYCY>Un{tuDHYuj;!OpA=_NIp4x{)^EX+Oaxz+b}42N3`O

diff --git client/target/classes/com/sy/feign/AccountFeign.class client/target/classes/com/sy/feign/AccountFeign.class
new file mode 100644
index 0000000000000000000000000000000000000000..b115ad903fe2fffd452f9d1a001f0a38894e51f2
GIT binary patch
literal 1068
zc$}S6TTk0C6h7`+ve9zeDEFK8Fm-#FHEH7kp2{R9q@p1Zec{PTPK#M;XR!mSrv0%!
z@B{XvCXUl8ZK@*BA~}&yzMGHjzyJQ+1Hb|7c~D}o9_Su7ecnOYRlFGlI#u@AO*|+w
zSiBLpf=5Di`FH;Y1IwVA8cc>j28~8*sNkbehF{Xp!}n8aq;-n+T8C#M5k0h+7zSmh
zMIp{fOZKoWjr1dIDy6NkQY(UdY3ZcPO`J&8?KtM0PJZw^^tmrp$VHCjXWH0P5yu21
zx5}-EQe?2q#ULv$<bGSU%tQUB_c{Jd(byv$_Q|^@!k$#Q*N2H7HQnFICJl;|JL58_
z=edhwa~-li>Syqikiok~YqUo#O>2KdxFiYv`PnP_hGWg#%)=Di`7as%X0ZSKEfV&+
zEfOiH<s`e1#-Xq{wwl%Ht!gt^8|~vHY4$>=Nr1;PqWxYPKf@ngYZ!c*8Zd}-8gd<@
z8XW$N@imgDEM@bCb~6kZya4x<=|WUshGrhkDhyuI=M{~4g3QvWUI8;ugE^{sjyDhP
z5-q^uh_f`6^Lmo=29`&h`WR;==d5O&n&YgwqJcUQ*J0x+v(17Tlwd1+Z)eadRd)t*
FyAM+@A07Yz

diff --git order/target/classes/com/sy/OrderApplication.class order/target/classes/com/sy/OrderApplication.class
new file mode 100644
index 0000000000000000000000000000000000000000..02b9c00ac662cf4e8739104459d84c3aea5340fa
GIT binary patch
literal 801
zc${@o%W~5&6g_H_I5p`jr7h)E*ri!SyDkXR8ORJPmokJ2i>_oxbyaN3Bg>`vELJcq
z_y9hN;Y!WWzyvSuwaz{F+=uk@*Y_U)Uf@}X6|4qmbkIbLVe3j<3!aH0<!AAgOe{m|
zr7Dy?VOZ@QO#-wT_7k1+YR1pZRGL?1nW;orrHc?D?gi*{u#OFezBVbZN~4PO!iZdc
z*5(tBwYGfh!G%l`H#OO~7u_{5%0yKS&lixfb$P?1Xqj@N3oCCdAL-&krL_@pCKpPK
zZo@-{#z;>k!)Bxk`L@nuX+AhELpRci$R@%lcb<a{d#NghgXlj)JHcEiYJRV`tk(&}
zg-J<bXGxegek$#yp1u=q5GxH4!?CVSBHt)ifA`;l11CZay{`+aaye0za+4N?wmwb*
zCrcOPS1)R-llg|^{32dc;O~k0ULc>v1XOb&F8-9@r=l#S87IP#o7W<%snc!R(4d+P
zj4XAftTr<|M?mk(eJfz@g^}H)6DQBeH~U|~zWDGK*_H>_uuZmeOF$Pp9=nfSV!7mF
zF9x)`LH`@pKHlYrzSuey-B{3QV-Ne}A2>a_CQm=`_8}gT@6z96@=u8V^c<|h;ctxG
B(KY}8

diff --git order/target/classes/com/sy/repository/OrderRepository.class order/target/classes/com/sy/repository/OrderRepository.class
new file mode 100644
index 0000000000000000000000000000000000000000..ec73d9390df82c5ec97f2909c39db890fcda61da
GIT binary patch
literal 677
zc$|$<OHaZ;5S}fRM*&|T__~;QfQ!9@@xZ~PNexD#_oZENN$HZ^EwO*igFnC@Wt=_~
zL=tT>+0M7$eBaE@`^W1W0QBLk3<iO7Pt0u<+mbDW;#$bq9!a0c`|rFAMFM*>x}<hM
z!>K)*%$TPMRG)b0590^!6S(L)j=Q3`BAgC-84zh6*e+LkfGW34KMVhkN;+qnNkza!
z5%z*-z~>xQ3sIt19rI~ObtD;q{y(&@+<c4)qoK+s7+j-cQPCx8bh_IJy+`yF$u9xR
zX92b}j2*OZc7GWn)kr$CJQ0ODAA1YWAyCU6W~`}3Yg1)sJul4Roi)-ZM8Jv`KK*LI
z8jDDJ?1l$;)7n_bW#U;PfR6>qSHb<5Pyz$Wm^BJe!J~>{Vbm}Ts3WBTJ6MuXOai-*
nZWZ=d&_N0{p|uGeZqsi6(C(~PwbQDjzpIWnI>O{6y*&K{HYkxj

diff --git order/target/classes/com/sy/beans/Order.class order/target/classes/com/sy/beans/Order.class
new file mode 100644
index 0000000000000000000000000000000000000000..30241f360e51faa825f9354a15c21d70120b881f
GIT binary patch
literal 3166
zc$~eK?NZxD6o%h5mJO~6Ujgb8K9WLe3`9w38VVtSn1V@cpcqKo^lPzI5Lgl;$(hnl
zdmX)m{%mIK=}dm~0(w!Mo?XcXWVuuRG&Aw8R_DC?oO5=M`0MYte*##<VFD3!#1TzG
zL5!jIgumu$g_}p}_Th<Eav5TebyIhrFm$A+54zBat~e4&yn`e|f5|db=UhG1xap|d
zc3HC-B6^vG@)t^Z%RE{Vo;Q-{K`%qp(99~sK>mt*ffl7%e-Z<@NoG|?=mpI7X;GRD
zB{7V585CYNbd%xcRl8NODh=ODVg$EHugqPoiB@&>in>NC(q=4)aS@T?xU|$y$+?}x
z9lXylZ17VpYndhPzSP}gnvsd=It;(0gF%J_6apW{8Dt77PhVOny0%VB45{6!>FS1d
zpga0uMO!sZi|BPCWSEn?e9s+Mvwtuu>IpBMI+m&Orjh!bp4Tng;O>$L{Ft9ncIL0+
zH(3-;<Q*&S?QU*uFvQQeOP*AYfphvdS18Pt%M-cWqG2pLgw-i{f3!^6N!cju%`7k&
z|7RKx=on<JGHu_J*G+A!Y8-0z9;fWlY0g_EUOC{lE}s3xsC%qCEr&}Ub&9*Upt;9Z
zd57EF&?s&hq2(2boYJ9XQ;sxulkQ0WmDiF_)WLf>(2^Cw9w*m=ygY;C+?pn`a2ggv
z=@5g4$iBQ<Eg~|po``1=6p;o(q?1Hey^A*#RPky-Hcr!KI2~rvpjnd_vzd>J`gthc
z>qbT{-ZnUjt~3za`O`$vs@f%OT^A)x$ZFja&Q!5ymgPFG&Ck5jIXyA#B=8w_<0y(N
zzsE3nk$K&GZJla<?Yu6q&P%RkpELY=xkSF9Cz|7CxuQ9fdCNMjo-MT=f_9F3=Vw}o
z`Kx@eFJEa0zC@N+Dn*_0(g{k;LmBl?dU=`6PKbspM$u8lC|jnOh?Xcu+4h#%&kV^;
z)70#2g*%Ss#PJ2ggKKw$I9@T#T*Hmdz3=!9!_<GuY8>A&jQzVQH73s(x2eZRsH?~5
zmp)xIi->QL9O+{tNBWw`kv<lnLqPLk8mG{KyBa<~8q*Fkm~k*mM&nYXhYS?V(epie
z`i;gojdwGDfMsUth-YT&=+4a5(U(a@>ln<WlsZzGRIHBCH*zzTe(w+*(2ppgbP>!A
z4AN`}DFPTLs41G=CySh?jtBS<kTVeqlQR)aM9xGw9dafDiprS?Ns%+b9m71$Q!#QE
zA%I*&tRORx0c21y`V~RV(<ru3L{JyZ3Ax({>EDuU9*5$yF?@uFzCcb&0b`jOC8S3A
zs8Kp<l#CjsqK478m;ionDtp!wmsH1^svqN#uc|h&NHyp@6N<EePy9kXp;4X&S)^c4
zD*4=(3Pb*xX(T-6CtRdYVKRM;{)$=(Vd@St&4)5Q#&Q@_caZ53`7E?y5~Xi4^+?$#
zcpAdg7i3xrWm>^%7*k)6=_&cFv|$p5u*ozaWuGA%!Za9U%7!wn;nOgt!64HH`Q+L#
ziR;j08kVx_<j~5L3NpP2Wy)bQj42gl+9sc!HcVcx@tH=X?DNnwJ{n{yhBCbfKjWi8
wrkCXNc^jtj%V%7)gAU}SdjVTCcGAmj`oB*iqH9G+=u3RHlET;c796R60KX7<+5i9m

diff --git user/target/classes/com/sy/handler/UserHandler.class user/target/classes/com/sy/handler/UserHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..63b0dcdab2712e961e55aff44feba2996f001ff2
GIT binary patch
literal 3286
zc$}S9ZC4XV6n-Wo1j33bD56l`3N1)=tMxrp1uU30Dg{KVeVZf$S=sEw-3gTA@qhG3
z^h53GX^(#B59p8T>7CgnZ){pDoMdM2-k0Y-_uk3;_4nI90o=rP1_|_}k+hIPFGKb@
z-{!W<y-oXJ@wq4|hTd7nbJQ({o~h~ee)OR~jf{l>SPUmhvT6src7=OoSNQg$K=}8<
zJwvi4eX<`aG<~ir-|;qc+RLDY!^koW*2!i?)MVf&>F+X}EksWJhS2zJ>f{D6gyA%f
zSU8FihSUFLz>wZ>yz-puG8~!8=chwRb>+Br!3mUcIBMZIPB5fOvhFF9ZeGjBExeDD
z41L<g{BFL?FgewdQ$bQj(|e$cf_s4pZ=9aCa0X|I#ComFm0%c|iqX`(PGB;P4=sFz
zskSn#?gmO!36882sH0(EN7~E8q#`~AujYoRmgg+Y;A4hkRlX$_q*vnVv7;)q3l#TM
zz%UVmdS7WWxBxqiPb^%-C5GXcaKvU!Ke-;^ncDASdR=FJ*}@fEWyq9;E0hR{8{QAW
zC||d5L(`ND__ol3oP}8}$b`Iw*2h<<FiushJAqSl#hm9!#g#)DGF&f6f71>$u+0sh
zSH+I>w<3-=c*!&cZy4BfbtQKkUzBqUm*35Fox62GW~ptxp$49KNj2OS{srCduPBKH
zStj}6g5!w?^=eW0Yn<TfNsuM(u5;hf&yg^xDh}ZvFLWOz9gKQU{HVJ(re@tz*bzm$
zNQSNGmxQ{{Yqij<*N)t>JcV$bszWW7y)RTnmY2Eqql8c3`d6JzkE^;*c&B6LXEvs%
zZ;}5|I~qItr3v)PerbXbNoU(@*@)Iw)T;+hYniLc9<e5|XowRI^-Z?3>8NP--ZT@m
z@~duh`IPFT&nN2KnAZ$f4h~QTEySnoz4PGU9#+JQx(L*~Ebr!GCyBsbJFvIAW-6PA
zvUYP$BT7=Xo<@cNyLAXNtFrEw#G<2{H`~&s7c`!3gBYJspy+r~zI4MTe-~53MH7C?
z4$G9Cmr@1F=e4klgTuXWGI)-yG+cc`(&;tPB+l`+<(7!%C_FS5!-;43sg>bKF?1Rx
z9846X+^W}d`v<a{;o5FZ#Hc?jbpGnLoy?Jo1@5}5juN>(NQSZVUH=$^mG?a1FStAi
zM34p%GkKs~(x90+`R}SUU7<4lvh~sJ0rW}e-*PZ~Mo+!8-ZE0UB1EzQT5r?mPJlV|
z(<Wuq=IND9E2A}a?hmln#%>|<0vy6!`nEy^e2zt08J2L5wAzh-L;9Bv<Ixyn4Q7xe
zc@5?nSb#5RN4E&l&<@woL;t|gSh74`nI*S}#>U^^y&g2ZXH3#3Dat7m;dE#bMbNt?
zd}*Q%p+LI??$f?ML1K^qcwk&Ti~+NZuSj+*L4uW#uBGO-KnvYaqSP-(sb@6CH#o-d
zb4UJ@E%|4<=D$iiy5Asayxum&q=IR$GjA}KKqsv;#_dR`)<}AQsCz{3b*d>w4{@>9
zO?nn<=Cnr389a`n-;JVMQS?&@B%4`<ykDgCQVRsD0l~r(eBFfbqy@s$283q@LRv%k
z#x&Cvd>chyi=vPIiVtSqVjB1z=OZMawjmib6~7LBYZ;+ibQ8^J1I=i6LcVLD`97AA
z8(j&x7DLEwTJQXSLVoBZgzjBY^o5RQxS7D~j^K;5E_G>$0|e*o!ILN&|0Sb3M7uJr
aqM^QlO?vL5=L&s1)C>-W7YI<t@qYl)X7m~W

diff --git order/target/classes/com/sy/beans/User.class order/target/classes/com/sy/beans/User.class
new file mode 100644
index 0000000000000000000000000000000000000000..ebe939efba67a86e802c8af869f68df7979991ad
GIT binary patch
literal 3419
zc%02u+fo}x5bXioS&Tt4ScHpkxC*cm9Fy1>5{!*aA~5FWI8IWvNP}1-?W%THPEo0R
zLtgWkPe`hwN|hh-0eQ+7rE+F=bz4TRJmev&8ck16ch8yAJ-vVa{q_$cx=*j-)I+^d
z3TYIk2&2J*RmnM*xl^v2PVU&@HlwIsEZW?07!BoL>u>a2SvO0$L)SLU(prLI6pvCu
zqdw9YU2hpYJAKUyE~Cf;!!+CtM!oY3C*rtk8V%5OMm<Im4s9Xx76J;3A&rs(O{@k0
zre5Jfc|)UNsjTXb^POcEh4Q9GX{j`g!bQXKJ&neMGE(AZk=sHwq0yvJ#a&+J)pN^~
zhEp2dqW2kTHZK{D%k84>@+PL5Ym{@3pjjINS2G&T(j23aihjYjEVH1yFAVn_lH=;8
z3wC~<58mY}UH`47h48Ay!c`Tc^g+#ZjS4?89OJaiH%-%Wb=SZh7_H_lyOeXP!t~4r
zmEiaycV^iY-OcGuOL^WAVr<JD1dUd87u=bQ5|{Wb@9r)ak=aCvyPJ*5NzE(qgtn|A
z2p`BBCf}=7PPu)g1DB{YtDu)pblVVXUm0@G4a7?3uM{alC7ib7Zp<qPIYDN3xqEIE
z_jPeUV20_B|F5h8WX!d^6{9dX+yR$E9rQ_**mS(j<dqwUD1C4}_MZ<{PR9y+`~EBP
z_S#n1+w&ijx7S+5vG+v2DacMs)}TLXJS;4oj^zM$4>}%L^ExdmVCDqP8W(F>iHju;
zt(sln+lDBKxVY49VTI&Av@F+gZN2Jc*%^q?UV@&{ew3bz*L%Qdy2X@XzOgR2PrUb_
zxAlT+*_VudYNymU^nyOs&0?85(|OCfs8!#c^$y3Q%c?5jukyi;+3|Ay5L<e=d}x4x
z7#%Sxi%WlR6xZ2OrqLnS=h)m*rqLR`Rih_*E3X-Pa<dD1%l7ssg8B_#Z2o|B?wBUG
zx5|jkohZFvH1n^>iPB3(6Yn-fllF{h3jH{SJ{!Y~&jX|$@ez>ous^5$dCZ?D{TWT1
z7|lcO!@Pizb!ZVAVQG+rVu_aVe;cbDW`;SO{f*c!(m#j)h*YNN1N>{A0ewg-m>J!n
zk6<O7H!$}I>+E8k*so3Rgw)=IPg+J8_N@E}LJG?h?uxj0x-x7Zt@>gA!W_rElKq{c
zB6NRtsZN90<vOLZ=}?_UvgvT0MziTioyN22Xq__IbgTnH79a@JglHVGCg>XINm2%Y
zrXby-8IZI{(||N1A%5+h*o3$uX=hRr#P>)^P~R&hL4HU|WAZve5($V%Nu(euC2`T1
zyy#R6AqD+{4?+L|kKjZwC!d6mn~B+nn>c<JiRs4}#7JR`V2omnV`N0q-r^P%%-lj-
z=4P9j>ysK0{Z2FOpg5SgySUk^GWDO(Jw@I02T#AJbiPk(s=Db99={HsjV^WLCB?6s
z0U7pzvX%#fm^PJ|*44E<7{v4#KHFU|CEIH`DZ_3kF{Of-c9fVtRbxs8G3~-<uM4K(
zc1*)E>}N_$BSB2hm6$fwm_~w_j^T6C1yi~mQ(A_7sKhiH#Pm{$X-kc1G>GXN_<Y+1
z(^xyEF&Xxe64Q7Pldi<{SdD2sh>64JtP7^ec1)8p>^417V9EqB8A?n~QD+KFnINVL
ne9SJGyl;w+Nwlk8`dqqyL3twCs&+9BQ2-(wLlJyQUs3uWniO>9

diff --git account/target/classes/com/sy/repository/AdminRepository.class account/target/classes/com/sy/repository/AdminRepository.class
new file mode 100644
index 0000000000000000000000000000000000000000..c4fc3bb0ba124f7df644855bbabd2eb0d4bef46b
GIT binary patch
literal 379
zc${^R%}N6?6ot>7IvuV3TL`Y*NOfWMx~dC77*Q15r^&UZbdr+E2=i(#d;lLx%#31H
z+AJ=7hm&)E-alU70Gwl-At4+oSBSC}o>#6k!TDNDbz$uN4`<jRj2H4nilwx3aXVYE
z3WUCFd{d=dWh0(W^6#h_OIv=WT%2qYW84jgXQ%I^mjws*B_VC&2!khM^<~{UuQlO#
zlCOK`&d#@GCMLQ^)k@32zy2R?p6ij&dvKLkd}WqQIQX~qS<|#jAau~YPCP=2ZsaUd
ZO4vnnmp$~>(ta!TG5F((FpM?9=o4V3VJiRt

diff --git zuul/target/classes/com/sy/utils/JWTUtils.class zuul/target/classes/com/sy/utils/JWTUtils.class
new file mode 100644
index 0000000000000000000000000000000000000000..e6895a268393678bb1c2aa2bb9388fac71e2b84e
GIT binary patch
literal 3220
zc$}S9*;f-+9R4obKo}(Kic3*J!=kZPt%|jUh=K;x2BE9%Wir4(G81MdEM2twzC3$Q
z-}|aBDf-aUzV`HQ>gjhUL5M`i@gcc)?)@#_@4Mgc&iwP=lRp7m#IGS#pi)DXj%w5h
zgcszpjHaYL7ri;NU>d$a%_YmW{L2EBk>05gYEh>lq@y0XKyzT8^{rGiCR3)Jl&(Pi
zoav9*o-b{~6ljn1#<yDysz7^mG$PEvGMN;pj*N||1kGsC(5j;i?E+1Pla9))KYuE^
zu;NFrPfrq%;hNHC=x&DIwjWcQj@vz)wNgpb9c*Tudv)wXCq1QMm>Jd-i|p>W74~e_
zHhjymqr+CrvAt}X`}H`0gBlL$cnMts4V%{EG9#ePI_`)x<^_&Kc8Qdy^@xt6=%yp-
zo3zrbuepf2E3BEc9m8=A5gong6X@El3gTL^{P~g9jOCi%5KBK3c{XMlBx)ECXj5k1
zTHxs^t2=5^i<3lpc*$E`S~=<^z2xj&&r7bDA)La?8cyqY1!qV?aSoZ9b6f&Td(okd
zDN7$6ABvqmdrshd0cD`XgzsAR+%}x0Vgv-8)A1_K3sia5oE^j}!?AaJLZ!uvItFox
z&|GsVOAZCb%M4d+WZAyy&Pv1dqEn`8&02<3GN6hs<8=*h=orGVKu=j-Y?c{yG6Dxn
zwLsp~R84jTBO0#ixQ0=Ieb2RIYb>kjn!trJnBM~HifK4WGs##K$#sF2P3MtS)og^T
zAuh0Ib0hB9bLyNXblk)(fjTA8SV~%yz||7z<HfG!3HHsR%Pb#BC7o1B?+A?Uoai}~
zmq<mOCB`PMu?e=jv;9<;^D6YGWGYMbRK-Y_Kx5pp&53M!#&jp;OiDF-+%aToO1hSM
zE-Y60^Oh&j5ii+#3}34*3un=!B#v%vY+ga76wSLftuCj=XG|H$vOVbsH+E~O`<fjv
zvvH*yDTkD5KM$+DxURL#Mr~({F<jd5IPx!}!OILB9yk4YCwWV{GHp_a<fksdMwfn8
zwdYvmh2oYZtEVj83kc?Ii<eNo5<tS2#v*|f%5F-@^h{EAZya3rsQ~k?jFwYI?-a2t
z^0!>9#=^EhDB)yX!@O!KBn=xnI;kv4?6Bkbp6|*`o?)-C25TXFgpW0RqT^HC<I!&h
zwd`f$kH&*?=pjiA0rLu}Pj7wtcWa{+obm}qrJYQfUU%Ga7PFb1D=czUDtfWae9E1D
zd$;eh4N?h<@5(Sf6F45(&TXl~Ab($k(2p;5WUv&**Uz}_c#is*ZJRD{Mb9%m4c`gu
zeV#_xn+26<_>rnDi*5}+3mn?nl&^)nF%Gkg3VulmbYcqA9N*$o1x}!fbACGV|81^B
zISP)|eSbha3QXSNe@(Dhk9Ya6=MC^4-sf0{yZ8W=f%9)1t2mxqhZgUz4Qn|xtfOhX
zZ{P_!fXCQhfr0)U4(HI*d}1BZ9L`Rhcu0@RAWJ9n0Aa>xVy+f`T()69x-dZaDsx{x
zIzEKtSjFcV7(~;^FSsO3VjbXbmgQAq?kQ4bKhM!ps0AN@g`luSg6DgcGX*}&Q8CmJ
zAX~?U$9PSkFNavX|6yD_3}UsQ6=Mao%>kO@93x!qCD#4`Wf%9G8R{BR^l9TP4Lk7e
z2(ST8p3zB-u?nbWS$9aOtZ)wZ7^ITpv4OvF;{n2b{R4mDMh@fCzoV6Fw;!M(Si7A=
zV*1fj3fp-w>R-cNg6brF2hf8<Pk}LFKox?S8z@1|Jop6a1hiJPhH04%I9kR^fyh;^
a-N)zn3f~09SJ3NQd`}L4z)$!E`~C;|kZlkE

diff --git menu/target/classes/com/sy/beans/Menu.class menu/target/classes/com/sy/beans/Menu.class
new file mode 100644
index 0000000000000000000000000000000000000000..a3a0c421de4a755f87b2ca579aabaac4da5951bf
GIT binary patch
literal 2466
zc$~GA(Nfz+6o&sbmSj63V2rU%TS5{Nj6!gdwrLxJ(_%tG>!g{1p%=-`Vk@9vON=Bl
z!*u!<z35}KGxl^Q7kz*}RHtWGim@d*)0>XR+N0fb{{7C`qy77z_kRI+gdcK9VM;?<
zhXR#h_8mXxwGOwBYd;>nGh04``q;89zs@jKT|3MogRF*}jw{d^@-3%Z^Db&fCbzxX
z3)Ai~q^vgSG%tmkj(xl-0<Y?r!7M}C=3SFvZp3HbcdgKCPDcUr49b~nwIXgiPVcB=
zO1A|aB_XE1?eKHQ6;l-*i}-}}{fjdSEHuaH4rp?7j<Wtt#}ckFl)C)XY&dp{`#)L!
z30a=cZQo<)R-^cF)HqdwPaI$^?#1xtf86ho>d|o8RF9daWt%U1-6PXI;3ObQ>$G_1
zkh_+64=2<9iRHzrC(f2gXJ459iPL_?T{=SFbjdN}JHhr0^VP)klw;H1qo$Y}Tb6m!
zq8BU{Vl@!x8il@;-J*FPtYS63iSW&k@2j9^#zDe*k%u?*7!wH{gh-Y|c4bGA?Ooae
z<UqDnk+kD=4gdp>h3bTZ$n85lw`J~HqRv@S(hUJYW!-ih-}7C57Sz|9QBlv~3BJ|v
zooLr>hLuZR%RYBb%`o?%gLiq$cianx-$oM)9Rtzl+-`SFZ>8xtr@ga}x7b*q<d3_*
zZbmPQvF;8f8obllw|sLmgB^zZBI%#4_7+=T7Pr9GDqCG&mS4J<3clrFQhdZ)>=y=o
z&$dms(czwFdK#WF-1<)$YS?2~`nW6IAAvKj(*=^E+d-ix-ECy0#BC)<x{u^o3g79L
zp>Z12y;!FA>-6?3jVg`H#-CuuodGmseSm4>?f`kCk{+OFRFnbAe@KNJ^jv~Q&nrmN
zZdp>hO1}c_S)pC7A&;B1S`Rd_f?I&J1RIl<pi4<h@J&fe5T>Oi7!}+myQokQ$Q|Se
zase$u!mIQY@SoEtL=^#lNtl!R1yY=sG{MeFNW-v-YACQnvtn)0=u_f-%DYc#_bKT<
z%J1<h@cU3zm7e7h#l@lG8jMh}Hbf%DXz-0hoI6+#52H?_Kv(5KL=(DAF{@HxA@CZO
zR}IT6%BC<`Hio;yEJvB9qfAC3(*^}4Fil69HYlbxfk_<nkZDHB-oyO_rhJs?K_b%w
zI`0Ige3a=S#e6k^NwnOMsUT&)NUT#a%Je9a>C5Cg6{Adbig_}DsWe)rl9YW&3B;Mo
zQKs!grmyi$5>q+Kv`aD1CNPQ5aL6P+yD2Jw2;anG8Z)%GMgIn#N;yVi&+$Df{{j}P
B$CLm7

diff --git eurekaserver/target/classes/com/sy/EurekaServerApplication.class eurekaserver/target/classes/com/sy/EurekaServerApplication.class
new file mode 100644
index 0000000000000000000000000000000000000000..0b408e1c2125af67df625d07f8a8c88d936e872c
GIT binary patch
literal 812
zc$|GwO>Yx15PfdbY`Sb|n?j*bs&Y$nz_%U<ssy2&!iNY72TtCNvvs>`M_z9!KZ_HH
z13!Qtg&4b$8l(juX5@J@Z{Cdk>-UeJ0G{F?#tK#=v=XeL&9HSYE(I@y&iUK)TxO1;
z{Y+`)P8e2uN0SI0hJ(zMy!ygVYb!6rSlUZzpU>xo%7jx!$B1z&LXuzuw;B4z=DeC)
zrSq8;rTlE{1y7A}d>n#HmDI!5WYga0M#r!aRW<mu6d5~TH#izKF=s|QdFA-f=$XoE
zE7C$PwHRK*1BTYnOeMqSNNM?|E>meg_*{nW$Yi3J2&?>k5p20LRWTfn{y)3tErp^P
zc6&{dCxi=|6VpxuO#6Q=-I<xb6Mh~iEhWZdQ`=0wQeMXXKl(oLTnu~fYwc7iC#q6@
zZmo?AIPsh`t}8r*sGZ3c`;v=ic|pM6gS~9tcVX%&*V4@jb;V_n$E%=^pK8CnWyu3P
zMnqrEpA|6w>Bw%<jgx2O*ZSYUz6N-UY&!(ku}wC)PCyqsA$A9MDa#ih2Qr}3jr!lQ
m{_&<h4$Ts3y0OI3!7lERzwi0ztwQ=<un+KXQMOP15%32m7}^E^

diff --git client/target/classes/com/sy/handler/OrderHandler.class client/target/classes/com/sy/handler/OrderHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..e04fc5725cd34d02f2fa979947c79bb6f77b04b8
GIT binary patch
literal 2986
zc$~FWTT|Oc6#mv1Tx@X-kP?z6kfhk8uxU$fn38Y_iCYm|NZdAklI;bQ3W-WGl*!~D
z^`V{VOq)LR2lPjEdUkCjfn~;YrsJ{C?%D60^X<8K|NiICzW^-YbruOEGe~JjqlaPe
zjd5sj%dmI(X7!Dz`3yaarfvF549R?<(u)t!n?Y7X4jRKm&DrPPG2b)nx+Pq`>DGn&
zyt!e>I&!-%%w3ydTyJ4_<i3eiN5vfaF_6Kah9L|yT<(Bl=-n~x`pWSuv(9iUUn=P#
zS>3UBi-o45;hPrMP0v@JM>LFLj3MP2hl0H4Pk2;?VS7#g#X=>E4>6v>6%7-($}kkV
zUU3|YpbVKq!)l1l9fq;|>w?~fP~kq(a2+@3?sZ`aU#uLLi0q|&8`X*gPieS`TLi8-
z4cl+sECyVX;Ey#-%lzb;S=jasUr2pH!;IATNA#PvI{HMztn{z7{0BB%!(Ew_Y~!GA
zoUk0<B9OT+DyC;vEwOCd4&hD5_81=Oj=Rgf1J|^7cU)s%969a}trYGUHQ#ZMxe*xf
z<%aJZnXaf8De<dLof1Ewo3?n-*slurr9ti)hIOZASQW!H<-Vm%`FkeCyQZJhS>!ZL
zcNIS|uoA5;bKj&!O*Ulu2G3@XR2#zIbLwS768D8m{(HBnqYS^{QpklaT4^z^YnI6O
zd~9NlM3q;GVl*euguh`N9GHqyTJ;jc4IcC~f2;2Fj=xp+AxZan$1rueEWs^K)#rZK
zG|Gm*can1=Qiz|2nC>RhYMvQJ;!GIsb<e@^qPgJB(d^!SOZ?anp1<PMkIDXa`@qD~
zPssLo&~=bCHNYXwK^~4Y)k>CTh=+rFQm(Wohm8K9cw`>iYpYNMpXR5>wli{+N2fT{
z=Xi98v)fL?t%-G04%1L{YUX54I!$tXmOX#fv3=LEnnQOHQ&pfad0MkeYL+Q%ACvTo
zB<TI2n#gyA<fpXjA^91}UXp3G`<!;1BqN!g`5o+6S|l*v0)tHNsb2-aeLPT3=^3G&
zG=7B?eSp51-;kNOI{O}dDg1KA$%t|?(*(Ah$kjtUQs;g2PCin6`%uIplK4WdlLU}Y
zC`bt`DW{LsMf%C?34NEp2lKFkRnko*NwFrC9@z!Ug>YFUF^Z=|Lo$Cx-ekxD$^6cH
zTuLDI2QG))v+DQ?$qB`OtO*bJ4`7{~FvT^^XoG;;^MG4Pam&aIf2mS;9ba`Ia4nv|
zB+01`1awMPKtPWW*a!%`2nnny0`wlX2s~~P$h8PeCh+r_%H<=0b3x#os!|ZR7zrF!
zWm5&#*y;RFpVK+F+dF6O0-aNi>zwkro%3~<ol_<;a}M)-JM;Pfm-*HOn9p{s_?`BO
zFLbDQIa={@Y{j?RDlVhn?Kp9B@eTik<nn)?xR<9VE<xpzzZC@?rqwqjzYXBu{R_22
BZD9Za

diff --git zuul/target/classes/META-INF/zuul.kotlin_module zuul/target/classes/META-INF/zuul.kotlin_module
new file mode 100644
index 0000000000000000000000000000000000000000..a49347afef10a9b5f95305e1058ba36adec7d6dd
GIT binary patch
literal 16
Rc${NkU|?ooU|@t|0RRA102TlM

diff --git order/target/classes/com/sy/beans/Admin.class order/target/classes/com/sy/beans/Admin.class
new file mode 100644
index 0000000000000000000000000000000000000000..edd17f94c2e42553a827d48087b12269bbd20f3d
GIT binary patch
literal 1819
zc$}S8YflqF6g|^7eNfu+5Jd&8wv<OfR8$^`k`PF$l7RTZPt$e+3+*o19WccBKl~Y*
zKuq}H5Aa7B@60Z3X%}Mr(4E&k=bm$CZu<Mr#V-J_uoOoC!6-sWgb`sFIN&F|+~DS3
z`F-_3)FeY>*)R>c$`CA0?)D*uz9`~JB#>mt)~sgPIW1QOH=Xk9debl&0!E#PDs85U
zW$rC0WPcKA3^2rw9buciDTtvXZd=-h7nw~Wrz4NJ<9xR4dY0r4B{7T<hLI*e6l<1Q
z<MN{+_i5%xZc2w?qu8Ccm%evrvUiJN@&BlH8A5ATot&jBhAG}1H><+l;njxrYSnmS
zm)nL~dz&G-Z;<lAN^dDi#lTx3_pSOCx2alE*c2I)mYa+~MPKRRJs~&g4zgE{wFf$M
z+{0XtKcziE&=0N4NjROWp`yQEh1v41$;Gr+@onqau8DO+S&eH~vx<bAy|FCmNShzI
z7M*kivvHI$7sb4~=qC*Mc0R*Au?~fo*1h|6UXzx6%J8jIm>1}hZg8{S5Kg{gS%=3*
zH{akD;Lhoh@CpA^>F$p!kH@1}<Bi6)A;nS*PZ<i@^%tYQ!luVBAO1>#6{g28AGcb4
zWk_zCrm)u<v@4t_78xG>ldmXVGTgg4l=|2W#ssxjfVwG2Uut5S1yon+F{j5q&@;g;
zT94AIL1T!<!O~B#($qPkrRj5|N;Buk{LrY|^c^OILWU5hZvy>L9h|})+AX<wjNvYz
zXDTn#GnF}@XDW9P_h_C9QUK@(v<WRHLSH3jfkp)kD>3ctam|sYJOetT%O3VJGTg_w
zN3cve)LFK4Mn=xa#~Csglpfz(Y!Oden<?93n!p2(soau6Ox@ryUl|XP_lmkoqmmra
z1?@I6PM8VJFziOPN*D1;r^*y&x=i#+TJAbErMflceKkEs!B11FTT_uRlh<fcm)O#j
z*0e=mO_^>@)4rM}{WWE}HO&!b{u)iWPE9%e-b)%jMM*(Dz%WC<1w7Mq4A1d`{t!q1
E0!F)DVE_OC

